{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Problem Set 1: Analysis of racial disparities in felony sentencing"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 0. Load packages and imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "## basic functionality\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import re\n",
    "\n",
    "## can add others if you need them\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "## repeated printouts\n",
    "from IPython.core.interactiveshell import InteractiveShell\n",
    "InteractiveShell.ast_node_interactivity = \"all\"\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 0.1: Load the data (0 points)\n",
    "\n",
    "Load the `sentencing_asof0405.csv` data\n",
    "\n",
    "*Notes*: You may receive a warning about mixed data types upon import; feel free to ignore"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/06/5t48x2mx0lsc_1v4jxgdssjc0000gn/T/ipykernel_98284/3345394113.py:5: DtypeWarning: Columns (10,11,14,25) have mixed types. Specify dtype option on import or set low_memory=False.\n",
      "  df = sentencing_data = pd.read_csv(\"/Users/ellascarola/desktop/QSS20/pset1_inputdata/sentencing_asof0405.csv\")\n"
     ]
    }
   ],
   "source": [
    "## load data on sentencing \n",
    "#df = sentencing_data = pd.read_csv(\"sentencing_asof0405.csv\")\n",
    "\n",
    "##Comment out if not Ella, this is just how its stored in my computer\n",
    "df = sentencing_data = pd.read_csv(\"/Users/ellascarola/desktop/QSS20/pset1_inputdata/sentencing_asof0405.csv\")\n",
    "\n",
    "## Comment out if not Sammi\n",
    "#df = pd.read_csv(\"pset1_inputdata/sentencing_asof0405.csv\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 0.2: Print head, dimensions, info (0 points)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CASE_ID</th>\n",
       "      <th>CASE_PARTICIPANT_ID</th>\n",
       "      <th>RECEIVED_DATE</th>\n",
       "      <th>OFFENSE_CATEGORY</th>\n",
       "      <th>PRIMARY_CHARGE_FLAG</th>\n",
       "      <th>CHARGE_ID</th>\n",
       "      <th>CHARGE_VERSION_ID</th>\n",
       "      <th>DISPOSITION_CHARGED_OFFENSE_TITLE</th>\n",
       "      <th>CHARGE_COUNT</th>\n",
       "      <th>DISPOSITION_DATE</th>\n",
       "      <th>...</th>\n",
       "      <th>INCIDENT_CITY</th>\n",
       "      <th>INCIDENT_BEGIN_DATE</th>\n",
       "      <th>INCIDENT_END_DATE</th>\n",
       "      <th>LAW_ENFORCEMENT_AGENCY</th>\n",
       "      <th>LAW_ENFORCEMENT_UNIT</th>\n",
       "      <th>ARREST_DATE</th>\n",
       "      <th>FELONY_REVIEW_DATE</th>\n",
       "      <th>FELONY_REVIEW_RESULT</th>\n",
       "      <th>ARRAIGNMENT_DATE</th>\n",
       "      <th>UPDATED_OFFENSE_CATEGORY</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>149765331439</td>\n",
       "      <td>175691153649</td>\n",
       "      <td>8/15/1984 12:00:00 AM</td>\n",
       "      <td>PROMIS Conversion</td>\n",
       "      <td>False</td>\n",
       "      <td>50510112469</td>\n",
       "      <td>116304211997</td>\n",
       "      <td>FIRST DEGREE MURDER</td>\n",
       "      <td>2</td>\n",
       "      <td>12/17/2014 12:00:00 AM</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8/9/1984 12:00:00 AM</td>\n",
       "      <td>NaN</td>\n",
       "      <td>CHICAGO POLICE DEPT</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8/15/1984 12:00:00 AM</td>\n",
       "      <td>08/15/1984 12:00:00 AM</td>\n",
       "      <td>Charge(S) Approved</td>\n",
       "      <td>9/21/1984 12:00:00 AM</td>\n",
       "      <td>Homicide</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>149765331439</td>\n",
       "      <td>175691153649</td>\n",
       "      <td>8/15/1984 12:00:00 AM</td>\n",
       "      <td>PROMIS Conversion</td>\n",
       "      <td>False</td>\n",
       "      <td>50510213021</td>\n",
       "      <td>98265074680</td>\n",
       "      <td>HOME INVASION</td>\n",
       "      <td>14</td>\n",
       "      <td>12/17/2014 12:00:00 AM</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8/9/1984 12:00:00 AM</td>\n",
       "      <td>NaN</td>\n",
       "      <td>CHICAGO POLICE DEPT</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8/15/1984 12:00:00 AM</td>\n",
       "      <td>08/15/1984 12:00:00 AM</td>\n",
       "      <td>Charge(S) Approved</td>\n",
       "      <td>9/21/1984 12:00:00 AM</td>\n",
       "      <td>Homicide</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>149765331439</td>\n",
       "      <td>175691153649</td>\n",
       "      <td>8/15/1984 12:00:00 AM</td>\n",
       "      <td>PROMIS Conversion</td>\n",
       "      <td>False</td>\n",
       "      <td>50516447217</td>\n",
       "      <td>131972895911</td>\n",
       "      <td>FIRST DEGREE MURDER</td>\n",
       "      <td>4</td>\n",
       "      <td>12/17/2014 12:00:00 AM</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8/9/1984 12:00:00 AM</td>\n",
       "      <td>NaN</td>\n",
       "      <td>CHICAGO POLICE DEPT</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8/15/1984 12:00:00 AM</td>\n",
       "      <td>08/15/1984 12:00:00 AM</td>\n",
       "      <td>Charge(S) Approved</td>\n",
       "      <td>9/21/1984 12:00:00 AM</td>\n",
       "      <td>Homicide</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>149765331439</td>\n",
       "      <td>175691153649</td>\n",
       "      <td>8/15/1984 12:00:00 AM</td>\n",
       "      <td>PROMIS Conversion</td>\n",
       "      <td>False</td>\n",
       "      <td>50516497493</td>\n",
       "      <td>131966356472</td>\n",
       "      <td>FIRST DEGREE MURDER</td>\n",
       "      <td>5</td>\n",
       "      <td>12/17/2014 12:00:00 AM</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8/9/1984 12:00:00 AM</td>\n",
       "      <td>NaN</td>\n",
       "      <td>CHICAGO POLICE DEPT</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8/15/1984 12:00:00 AM</td>\n",
       "      <td>08/15/1984 12:00:00 AM</td>\n",
       "      <td>Charge(S) Approved</td>\n",
       "      <td>9/21/1984 12:00:00 AM</td>\n",
       "      <td>Homicide</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>149765331439</td>\n",
       "      <td>175691153649</td>\n",
       "      <td>8/15/1984 12:00:00 AM</td>\n",
       "      <td>PROMIS Conversion</td>\n",
       "      <td>False</td>\n",
       "      <td>50516648320</td>\n",
       "      <td>98059642859</td>\n",
       "      <td>HOME INVASION</td>\n",
       "      <td>13</td>\n",
       "      <td>12/17/2014 12:00:00 AM</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8/9/1984 12:00:00 AM</td>\n",
       "      <td>NaN</td>\n",
       "      <td>CHICAGO POLICE DEPT</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8/15/1984 12:00:00 AM</td>\n",
       "      <td>08/15/1984 12:00:00 AM</td>\n",
       "      <td>Charge(S) Approved</td>\n",
       "      <td>9/21/1984 12:00:00 AM</td>\n",
       "      <td>Homicide</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 41 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        CASE_ID  CASE_PARTICIPANT_ID          RECEIVED_DATE  \\\n",
       "0  149765331439         175691153649  8/15/1984 12:00:00 AM   \n",
       "1  149765331439         175691153649  8/15/1984 12:00:00 AM   \n",
       "2  149765331439         175691153649  8/15/1984 12:00:00 AM   \n",
       "3  149765331439         175691153649  8/15/1984 12:00:00 AM   \n",
       "4  149765331439         175691153649  8/15/1984 12:00:00 AM   \n",
       "\n",
       "    OFFENSE_CATEGORY  PRIMARY_CHARGE_FLAG    CHARGE_ID  CHARGE_VERSION_ID  \\\n",
       "0  PROMIS Conversion                False  50510112469       116304211997   \n",
       "1  PROMIS Conversion                False  50510213021        98265074680   \n",
       "2  PROMIS Conversion                False  50516447217       131972895911   \n",
       "3  PROMIS Conversion                False  50516497493       131966356472   \n",
       "4  PROMIS Conversion                False  50516648320        98059642859   \n",
       "\n",
       "  DISPOSITION_CHARGED_OFFENSE_TITLE  CHARGE_COUNT        DISPOSITION_DATE  \\\n",
       "0               FIRST DEGREE MURDER             2  12/17/2014 12:00:00 AM   \n",
       "1                     HOME INVASION            14  12/17/2014 12:00:00 AM   \n",
       "2               FIRST DEGREE MURDER             4  12/17/2014 12:00:00 AM   \n",
       "3               FIRST DEGREE MURDER             5  12/17/2014 12:00:00 AM   \n",
       "4                     HOME INVASION            13  12/17/2014 12:00:00 AM   \n",
       "\n",
       "   ... INCIDENT_CITY   INCIDENT_BEGIN_DATE INCIDENT_END_DATE  \\\n",
       "0  ...           NaN  8/9/1984 12:00:00 AM               NaN   \n",
       "1  ...           NaN  8/9/1984 12:00:00 AM               NaN   \n",
       "2  ...           NaN  8/9/1984 12:00:00 AM               NaN   \n",
       "3  ...           NaN  8/9/1984 12:00:00 AM               NaN   \n",
       "4  ...           NaN  8/9/1984 12:00:00 AM               NaN   \n",
       "\n",
       "  LAW_ENFORCEMENT_AGENCY LAW_ENFORCEMENT_UNIT            ARREST_DATE  \\\n",
       "0    CHICAGO POLICE DEPT                  NaN  8/15/1984 12:00:00 AM   \n",
       "1    CHICAGO POLICE DEPT                  NaN  8/15/1984 12:00:00 AM   \n",
       "2    CHICAGO POLICE DEPT                  NaN  8/15/1984 12:00:00 AM   \n",
       "3    CHICAGO POLICE DEPT                  NaN  8/15/1984 12:00:00 AM   \n",
       "4    CHICAGO POLICE DEPT                  NaN  8/15/1984 12:00:00 AM   \n",
       "\n",
       "       FELONY_REVIEW_DATE FELONY_REVIEW_RESULT       ARRAIGNMENT_DATE  \\\n",
       "0  08/15/1984 12:00:00 AM   Charge(S) Approved  9/21/1984 12:00:00 AM   \n",
       "1  08/15/1984 12:00:00 AM   Charge(S) Approved  9/21/1984 12:00:00 AM   \n",
       "2  08/15/1984 12:00:00 AM   Charge(S) Approved  9/21/1984 12:00:00 AM   \n",
       "3  08/15/1984 12:00:00 AM   Charge(S) Approved  9/21/1984 12:00:00 AM   \n",
       "4  08/15/1984 12:00:00 AM   Charge(S) Approved  9/21/1984 12:00:00 AM   \n",
       "\n",
       "  UPDATED_OFFENSE_CATEGORY  \n",
       "0                 Homicide  \n",
       "1                 Homicide  \n",
       "2                 Homicide  \n",
       "3                 Homicide  \n",
       "4                 Homicide  \n",
       "\n",
       "[5 rows x 41 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "(248146, 41)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 248146 entries, 0 to 248145\n",
      "Data columns (total 41 columns):\n",
      " #   Column                             Non-Null Count   Dtype  \n",
      "---  ------                             --------------   -----  \n",
      " 0   CASE_ID                            248146 non-null  int64  \n",
      " 1   CASE_PARTICIPANT_ID                248146 non-null  int64  \n",
      " 2   RECEIVED_DATE                      248146 non-null  object \n",
      " 3   OFFENSE_CATEGORY                   248146 non-null  object \n",
      " 4   PRIMARY_CHARGE_FLAG                248146 non-null  bool   \n",
      " 5   CHARGE_ID                          248146 non-null  int64  \n",
      " 6   CHARGE_VERSION_ID                  248146 non-null  int64  \n",
      " 7   DISPOSITION_CHARGED_OFFENSE_TITLE  248146 non-null  object \n",
      " 8   CHARGE_COUNT                       248146 non-null  int64  \n",
      " 9   DISPOSITION_DATE                   248146 non-null  object \n",
      " 10  DISPOSITION_CHARGED_CHAPTER        248146 non-null  object \n",
      " 11  DISPOSITION_CHARGED_ACT            242771 non-null  object \n",
      " 12  DISPOSITION_CHARGED_SECTION        242771 non-null  object \n",
      " 13  DISPOSITION_CHARGED_CLASS          248127 non-null  object \n",
      " 14  DISPOSITION_CHARGED_AOIC           248122 non-null  object \n",
      " 15  CHARGE_DISPOSITION                 248146 non-null  object \n",
      " 16  CHARGE_DISPOSITION_REASON          904 non-null     object \n",
      " 17  SENTENCE_JUDGE                     247404 non-null  object \n",
      " 18  SENTENCE_COURT_NAME                246761 non-null  object \n",
      " 19  SENTENCE_COURT_FACILITY            246216 non-null  object \n",
      " 20  SENTENCE_PHASE                     248146 non-null  object \n",
      " 21  SENTENCE_DATE                      248146 non-null  object \n",
      " 22  SENTENCE_TYPE                      248146 non-null  object \n",
      " 23  CURRENT_SENTENCE_FLAG              248146 non-null  bool   \n",
      " 24  COMMITMENT_TYPE                    246464 non-null  object \n",
      " 25  COMMITMENT_TERM                    246434 non-null  object \n",
      " 26  COMMITMENT_UNIT                    246434 non-null  object \n",
      " 27  LENGTH_OF_CASE_in_Days             229126 non-null  float64\n",
      " 28  AGE_AT_INCIDENT                    238359 non-null  float64\n",
      " 29  RACE                               246879 non-null  object \n",
      " 30  GENDER                             247337 non-null  object \n",
      " 31  INCIDENT_CITY                      228745 non-null  object \n",
      " 32  INCIDENT_BEGIN_DATE                239122 non-null  object \n",
      " 33  INCIDENT_END_DATE                  22008 non-null   object \n",
      " 34  LAW_ENFORCEMENT_AGENCY             239405 non-null  object \n",
      " 35  LAW_ENFORCEMENT_UNIT               76408 non-null   object \n",
      " 36  ARREST_DATE                        242981 non-null  object \n",
      " 37  FELONY_REVIEW_DATE                 171907 non-null  object \n",
      " 38  FELONY_REVIEW_RESULT               171907 non-null  object \n",
      " 39  ARRAIGNMENT_DATE                   229126 non-null  object \n",
      " 40  UPDATED_OFFENSE_CATEGORY           248146 non-null  object \n",
      "dtypes: bool(2), float64(2), int64(5), object(32)\n",
      "memory usage: 74.3+ MB\n"
     ]
    }
   ],
   "source": [
    "## print head\n",
    "df.head()\n",
    "## print dimensions\n",
    "df.shape\n",
    "## print info\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Part one: data cleaning/interpretation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1.1: Understanding the unit of analysis (5 points)\n",
    "\n",
    "- Print the number of unique values for the following columns. Do so in a way that avoids copying/pasting code for \n",
    "the three:\n",
    "\n",
    "    - Cases (`CASE_ID`)\n",
    "    - People in that case (`CASE_PARTICIPANT_ID`)\n",
    "    - Charges (`CHARGE_ID`)\n",
    "\n",
    "- Write a couple sentences on the following and show an example of each (e.g., a case involving multiple people):\n",
    "    \n",
    "    - Why there are more unique people than unique cases?\n",
    "    - Why there are more unique charges than unique people?\n",
    "\n",
    "- Print the mean and median number of charges per case/participant \n",
    "\n",
    "- Print the mean and median number of participants per case\n",
    "\n",
    "- Does the data seem to enable us to follow the same defendant across different cases they're charged in? Write 1 sentence in support of your conclusion.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "CASE_ID                197519\n",
       "CASE_PARTICIPANT_ID    211977\n",
       "CHARGE_ID              229015\n",
       "dtype: int64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## printing number of unique values for 3 CASE_ID, CASE_PARTICIPANT_ID, CHARGE_ID columns:\n",
    "df[[\"CASE_ID\", \"CASE_PARTICIPANT_ID\", \"CHARGE_ID\"]].nunique() \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CASE_ID</th>\n",
       "      <th>CASE_PARTICIPANT_ID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>92</th>\n",
       "      <td>166402790922</td>\n",
       "      <td>144234439761</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>102</th>\n",
       "      <td>166402790922</td>\n",
       "      <td>144234534133</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          CASE_ID  CASE_PARTICIPANT_ID\n",
       "92   166402790922         144234439761\n",
       "102  166402790922         144234534133"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## There are more unique people than unique cases because some of the cases involve\n",
    "## multiple people or co-defendants. \n",
    "\n",
    "## Check are there cases with multiple unique participants \n",
    "#example_1 = df_sent.groupby(\"CASE_ID\")[\"CASE_PARTICIPANT_ID\"].nunique().sort_values(ascending = False).head()\n",
    "#print(example_1)\n",
    "\n",
    "## Example of a case involving multiple people:\n",
    "participants_per_case = df.groupby(\"CASE_ID\")[\"CASE_PARTICIPANT_ID\"].nunique()\n",
    "example_case_id = participants_per_case[participants_per_case > 1].index[0]\n",
    "\n",
    "df[df[\"CASE_ID\"] == example_case_id][[\"CASE_ID\", \"CASE_PARTICIPANT_ID\"]].drop_duplicates()\n",
    "## Here we are interested in looking at one case that has at least 2 unique participants. We drop duplicates so that it doesn't list \n",
    "## participants more than once. As we can see, Case #166402790922 involves 2 participants: 144234439761 and 144234534133.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CASE_ID</th>\n",
       "      <th>CASE_PARTICIPANT_ID</th>\n",
       "      <th>CHARGE_ID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>10561</th>\n",
       "      <td>290136075812</td>\n",
       "      <td>97581722610</td>\n",
       "      <td>138443602912</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10562</th>\n",
       "      <td>290136075812</td>\n",
       "      <td>97581722610</td>\n",
       "      <td>138495990272</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10563</th>\n",
       "      <td>290136075812</td>\n",
       "      <td>97581722610</td>\n",
       "      <td>138496040547</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10564</th>\n",
       "      <td>290136075812</td>\n",
       "      <td>97581722610</td>\n",
       "      <td>138495939996</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            CASE_ID  CASE_PARTICIPANT_ID     CHARGE_ID\n",
       "10561  290136075812          97581722610  138443602912\n",
       "10562  290136075812          97581722610  138495990272\n",
       "10563  290136075812          97581722610  138496040547\n",
       "10564  290136075812          97581722610  138495939996"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## There are more unique charges than unique people because, in some cases, people are charged\n",
    "## with multiple offenses.\n",
    "\n",
    "## Check to see if participants were charged more than once\n",
    "#example_2 = df_sent.groupby(\"CASE_PARTICIPANT_ID\")[\"CHARGE_ID\"].nunique().sort_values(ascending = False).head()\n",
    "#print(example_2)\n",
    "\n",
    "## Example of one person being charged with multiple unique offenses in a case: \n",
    "charges_per_person = df.groupby(\"CASE_PARTICIPANT_ID\")[\"CHARGE_ID\"].nunique()\n",
    "example_person_id = charges_per_person[charges_per_person > 1].index[0]\n",
    "\n",
    "df[df[\"CASE_PARTICIPANT_ID\"] == example_person_id][[\"CASE_ID\", \"CASE_PARTICIPANT_ID\", \"CHARGE_ID\"]].drop_duplicates()\n",
    "## Here we are interested in looking at one participant that has at least 2 unique charges for one case. As we can see, for Case #290136075812,\n",
    "## participant 97581722610 has 4 unique charges: 138443602912, 138495990272, 138496040547, 138495939996."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "charges per case:\n",
      "mean      1.159458\n",
      "median    1.000000\n",
      "Name: CHARGE_ID, dtype: float64\n",
      "charges per participant:\n",
      "mean      1.126146\n",
      "median    1.000000\n",
      "Name: CHARGE_ID, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "## Print the mean and median number of charges per case and participant. **For all of these calculations, I am assuming\n",
    "## we are interested in the mean/median number of UNIQUE charges or participants. Approved by prof in class to have this assumption**\n",
    "\n",
    "## mean and median number of charges per case\n",
    "ch_per_case = df.groupby(\"CASE_ID\")[\"CHARGE_ID\"].nunique().agg([\"mean\", \"median\"])\n",
    "print(\"charges per case:\")\n",
    "print(ch_per_case)\n",
    "## mean and median number of charges per participant\n",
    "ch_per_part = df.groupby(\"CASE_PARTICIPANT_ID\")[\"CHARGE_ID\"].nunique().agg([\"mean\", \"median\"])\n",
    "print(\"charges per participant:\")\n",
    "print(ch_per_part)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "participants per case:\n",
      "mean      1.073198\n",
      "median    1.000000\n",
      "Name: CASE_PARTICIPANT_ID, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "## Print the mean and median number of participants per case. **For all of these calculations, I am assuming\n",
    "## we are interested in the mean/median number of UNIQUE charges or participants.**\n",
    "\n",
    "# mean and median number of charges per case\n",
    "ch_per_case = df.groupby(\"CASE_ID\")[\"CASE_PARTICIPANT_ID\"].nunique().agg([\"mean\", \"median\"])\n",
    "print(\"participants per case:\")\n",
    "print(ch_per_case)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Series([], Name: CASE_ID, dtype: int64)\n"
     ]
    }
   ],
   "source": [
    "## Given the following check, the data does not seem to enable us to follow the same \n",
    "## defendant across different cases, as each CASE_PARTICIPANT_ID appears in only one CASE_ID\n",
    "## and there are no other participant ID variables that we can use.\n",
    "\n",
    "participant_case_count = df.groupby(\"CASE_PARTICIPANT_ID\")[\"CASE_ID\"].nunique()\n",
    "participants_w_mult_cases = participant_case_count[participant_case_count > 1]\n",
    "print(participants_w_mult_cases.head())\n",
    "\n",
    "## We use this to check if there are alternative participant ID columns that may track participants across cases. \n",
    "## From the output, we see that this isn't so.\n",
    "#print([col for col in df.columns if \"ID\" in col])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Write 1 sentence in support of your conclusion.\n",
    "\n",
    "Since no participants are printed in the output, no participant_ID is associated with\n",
    "more than one case. Defendants do not appear in multiple cases, so we cannot track them across cases."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1.2.1: Which offense is final? (3 points)\n",
    "\n",
    "- First, read the data documentation [link](https://datacatalog.cookcountyil.gov/api/views/tg8v-tm6u/files/8597cdda-f7e1-44d1-b0ce-0a4e43f8c980?download=true&filename=CCSAO%20Data%20Glossary.pdf) and summarize in your own words the differences between `OFFENSE_CATEGORY` and `UPDATED_OFFENSE_CATEGORY` \n",
    "\n",
    "- Construct an indicator `is_changed_offense` that's True for case-participant-charge observations (rows) where there's a difference between the original charge (offense category) and the most current charge (updated offense category). What are some of the more common changed offenses? (can just print result of sort_values based on original offense category)\n",
    "\n",
    "- Print one example of a changed offense from one of these categories and comment on what the reason may be\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Summarize the differences between OFFENSE_CATEGORY and UPDATED_OFFENSE_CATEGORY:**\n",
    "\n",
    "â€¢ OFFENSE_CATEGORY corresponds to the offense assigned to an individual at the time \n",
    "when initial charges are filed. As the case evolves, the offense assigned to an individual \n",
    "can change, so UPDATED_OFFENSE_CATEGORY reflects the most recent offense charge brought\n",
    "against an individual. \n",
    "\n",
    "â€¢ A preliminary example of this, found by running \n",
    "df[[\"OFFENSE_CATEGORY\", \"UPDATED_OFFENSE_CATEGORY\"]] \n",
    "is a case in which what was initially categorized as a \"home invasion\" became \n",
    "a \"UUW - Unlawful Use of Weapon.\" A potential reason is that through investigation, it was\n",
    "found that the weapon played a larger part in the case."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "OFFENSE_CATEGORY\n",
       "PROMIS Conversion               6394\n",
       "DUI                             3896\n",
       "UUW - Unlawful Use of Weapon    2155\n",
       "Other Offense                   2125\n",
       "Aggravated Battery              1927\n",
       "Burglary                        1513\n",
       "Attempt Homicide                1174\n",
       "Theft                           1025\n",
       "Domestic Battery                 793\n",
       "Aggravated DUI                   748\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## Construct \"is_changed_offense\" indicator\n",
    "df[\"is_changed_offense\"] = df[\"OFFENSE_CATEGORY\"] != df[\"UPDATED_OFFENSE_CATEGORY\"]\n",
    "\n",
    "## check:\n",
    "# df[[\"OFFENSE_CATEGORY\", \"UPDATED_OFFENSE_CATEGORY\", \"is_changed_offense\"]]\n",
    "\n",
    "\n",
    "## What are the most common changes offenses?\n",
    "changed_offenses = df[df[\"is_changed_offense\"]== True]\n",
    "changed_offenses_count = changed_offenses[\"OFFENSE_CATEGORY\"].value_counts().sort_values(ascending=False)\n",
    "changed_offenses_count.head(10) \n",
    "\n",
    "## PROMIS Conversion, DUI, and UUW are all common offenses."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CASE_ID</th>\n",
       "      <th>CASE_PARTICIPANT_ID</th>\n",
       "      <th>OFFENSE_CATEGORY</th>\n",
       "      <th>UPDATED_OFFENSE_CATEGORY</th>\n",
       "      <th>is_changed_offense</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>11021</th>\n",
       "      <td>377427814448</td>\n",
       "      <td>695176993911</td>\n",
       "      <td>DUI</td>\n",
       "      <td>Aggravated DUI</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            CASE_ID  CASE_PARTICIPANT_ID OFFENSE_CATEGORY  \\\n",
       "11021  377427814448         695176993911              DUI   \n",
       "\n",
       "      UPDATED_OFFENSE_CATEGORY  is_changed_offense  \n",
       "11021           Aggravated DUI                True  "
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## Print one example of a changed offense from one of these categories and comment on what the reason may be\n",
    "\n",
    "changed_example = df[df[\"is_changed_offense\"] & (df[\"OFFENSE_CATEGORY\"] == \"DUI\")].head(1)\n",
    "changed_example[[\"CASE_ID\", \"CASE_PARTICIPANT_ID\", \"OFFENSE_CATEGORY\", \"UPDATED_OFFENSE_CATEGORY\", \"is_changed_offense\"]]\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Comment on what the reason may be**\n",
    "\n",
    "Maybe  this defendant's offense was changed from DUI to Aggravated DUI because the prosecution decided that the crime should have a more \n",
    "serious sentence associated with it. Perhaps the defendant struck something with the car or endagered other people, prompting a harsher offense\n",
    "against them."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1.2.2: Simplifying the charges (5 points)\n",
    "\n",
    "Using the field (`UPDATED_OFFENSE_CATEGORY`), create a new field, `simplified_offense_derived`, that simplifies the many offense categories into broader buckets using the following process:\n",
    "\n",
    "First, combine all offenses beginning with \"Aggravated\" into a single category without that prefix (e.g., Aggravated Battery and Battery just becomes Battery)\n",
    "\n",
    "Then:\n",
    "- Combine all offenses with arson into a single arson category (`Arson`)\n",
    "- Combine all offenses with homicide into a single homicide category (`Homicide`)\n",
    "- Combine all offenses with vehicle/vehicular in the name into a single vehicle category (`Vehicle-related`)\n",
    "- Combine all offenses with battery in the name into a single battery category (`Battery`)\n",
    "\n",
    "Try to do so efficiently (e.g., using map and a dictionary or np.select rather than separate line for each recoded offense)\n",
    "\n",
    "Print the difference between the # of unique offenses in the original `UPDATED_OFFENSE_CATEGORY` field and the # of unique offenses in your new `simplified_offense_derived` field\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "## First combine all \"Aggravated\" offenses into a single category w/o prefix\n",
    "\n",
    "df[\"simplified_offense_derived\"] = df[\"UPDATED_OFFENSE_CATEGORY\"]\n",
    "df[\"simplified_offense_derived\"] = df[\"UPDATED_OFFENSE_CATEGORY\"].apply(\n",
    "    lambda x: x.replace(\"Aggravated \", \"\") if x.startswith(\"Aggravated \") else x\n",
    ")\n",
    "\n",
    "## Check:\n",
    "#df[\"UPDATED_OFFENSE_CATEGORY\"].str.startswith(\"Aggravated \").sum()\n",
    "#df[\"simplified_offense_derived\"].str.startswith(\"Aggravated \").sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Now combine other types of offenses according to the descriptions above:\n",
    "\n",
    "conditions = [\n",
    "    df[\"UPDATED_OFFENSE_CATEGORY\"].str.contains(\"arson\", case=False, na=False),\n",
    "    df[\"UPDATED_OFFENSE_CATEGORY\"].str.contains(\"homicide\", case=False, na=False),\n",
    "    df[\"UPDATED_OFFENSE_CATEGORY\"].str.contains(\"vehicle|vehicular\", case=False, na=False),\n",
    "    df[\"UPDATED_OFFENSE_CATEGORY\"].str.contains(\"battery\", case=False, na=False),\n",
    "]\n",
    "\n",
    "categories = [\n",
    "    \"Arson\",\n",
    "    \"Homicide\",\n",
    "    \"Vehicle-related\",\n",
    "    \"Battery\"\n",
    "]\n",
    "\n",
    "df[\"simplified_offense_derived\"] = np.select(\n",
    "    conditions,\n",
    "    categories,\n",
    "    default = df[\"simplified_offense_derived\"])\n",
    "\n",
    "## Check:\n",
    "#df[[\"UPDATED_OFFENSE_CATEGORY\", \"simplified_offense_derived\"]][df[\"simplified_offense_derived\"].str.contains(\"homicide|arson|vehicle|vehicular|batter\",case=False, na=False)].sample(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Difference between original and simplified offenses: 14\n"
     ]
    }
   ],
   "source": [
    "## Print difference between # of unique offenses in original offense category and simplified offense category:\n",
    "\n",
    "print(\"Difference between original and simplified offenses:\", df[\"UPDATED_OFFENSE_CATEGORY\"].nunique() - df[\"simplified_offense_derived\"].nunique())\n",
    "\n",
    "#df[\"UPDATED_OFFENSE_CATEGORY\"].unique()\n",
    "#df[\"simplified_offense_derived\"].unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1.3: Cleaning additional variables (10 points)\n",
    "\n",
    "Clean the following variables; make sure to retain the original variable in data and use the derived suffix so it's easier to pull these cleaned out variables later (e.g., `age_derived`) to indicate this was a transformation\n",
    "\n",
    "- Race: create True/false indicators for `is_black_derived` (Black only or mixed race with hispanic), Non-Black Hispanic, so either hispanic alone or white hispanic (`is_hisp_derived`), White non-hispanic (`is_white_derived`), or none of the above (`is_othereth_derived`)\n",
    "\n",
    "- Gender: create a boolean true/false indicator for `is_male_derived` (false is female, unknown, or other)\n",
    "\n",
    "- Age at incident: you notice outliers like 130-year olds. Winsorsize the top 0.01% of values to be equal to the 99.99th percentile value pre-winsorization. Call this `age_derived`\n",
    "\n",
    "- Create `sentenceymd_derived` that's a version of `SENTENCING_DATE` converted to datetime format. Also create a rounded version, `sentenceym_derived`, that's rounded down to the first of the month and the year (e.g., 01-05-2016 and 01-27-2016 each become 01-01-2016)\n",
    "    - Hint: all timestamps are midnight so u can strip in conversion. For full credit, before converting, you notice that some of the years have been mistranscribed (e.g., 291X or 221X instead of 201X). Programatically fix those (eg 2914 -> 2014). Even after cleaning, there will still be some that are after the year 2021 that we'll filter out later. For partial credit, you can ignore the timestamps that cause errors and set errors = \"coerce\" within `pd.to_datetime()` to allow the conversion to proceed. \n",
    "\n",
    "- Sentencing judge: create an identifier (`judgeid_derived`) for each unique judge (`SENTENCE_JUDGE`) structured as judge_1, judge_2...., with the order determined by sorting the judges (will sort on fname then last). When finding unique judges, there are various duplicates we could weed out --- for now, just focus on (1) the different iterations of Doug/Douglas Simpson, (2) the different iterations of Shelley Sutker (who appears both with her maiden name and her hyphenated married name). \n",
    "     - Hint: due to mixed types, you may need to cast the `SENTENCE_JUDGE` var to a diff type to sort\n",
    "\n",
    "After finishing, print a random sample of 10 rows (data.sample(n = 10)) with the original and cleaned columns for the relevant variables to validate your work"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Race:\n",
    "\n",
    "## to see what the race categories are:\n",
    "#df[\"RACE\"].unique()\n",
    "\n",
    "df[\"is_black_derived\"] = df[\"RACE\"].str.contains(\"Black\", case=False, na=False)\n",
    "df[\"is_hisp_derived\"] = df[\"RACE\"].str.contains(\"Hispanic\", case=False, na=False) & ~df[\"is_black_derived\"]\n",
    "df[\"is_white_derived\"] = df[\"RACE\"].str.contains(\"White\", case=False, na=False) & ~df[\"is_hisp_derived\"]\n",
    "df[\"is_othereth_derived\"] = ~df[\"is_black_derived\"] & ~df[\"is_hisp_derived\"] & ~df[\"is_white_derived\"]\n",
    "\n",
    "## check - we hope to see all the race variables coded correctly:\n",
    "#df[[\"RACE\", \"is_black_derived\", \"is_hisp_derived\", \"is_white_derived\", \"is_othereth_derived\"]].sample(50)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Gender:\n",
    "\n",
    "## First, see how gender variables are coded:\n",
    "#print(df[\"GENDER\"].value_counts())\n",
    "\n",
    "## Construct is_male_derived\n",
    "df[\"is_male_derived\"] = df[\"GENDER\"].str.lower() == \"male\"\n",
    "\n",
    "## check - we hope to see is_male_derived coded correctly:\n",
    "#df[[\"GENDER\", \"is_male_derived\"]].sample(50)\n",
    "## check - we want to make sure that 'male name, no gender given' is coded as FALSE:\n",
    "#df[df[\"GENDER\"] == \"Male name, no gender given\"][[\"GENDER\", \"is_male_derived\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Age at Incident:\n",
    "df[\"age_derived\"] = df[\"AGE_AT_INCIDENT\"]\n",
    "age_cap = df[\"age_derived\"].quantile(0.9999)\n",
    "\n",
    "df.loc[df[\"age_derived\"] > age_cap, \"age_derived\"] = age_cap\n",
    "\n",
    "## check - we hope to see 0 rows:\n",
    "# print(df[df[\"age_derived\"] > age_cap].shape)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/06/5t48x2mx0lsc_1v4jxgdssjc0000gn/T/ipykernel_98284/2976139598.py:11: UserWarning: Could not infer format, so each element will be parsed individually, falling back to `dateutil`. To ensure parsing is consistent and as-expected, please specify a format.\n",
      "  df[\"sentenceymd_derived\"] = pd.to_datetime(df[\"sentencing_date_clean\"], errors=\"coerce\")\n"
     ]
    }
   ],
   "source": [
    "## Sentencing Date: \n",
    "df[\"sentencing_date_clean\"] = df[\"SENTENCE_DATE\"].astype(str).str.strip()\n",
    "\n",
    "## This is repetitive, but it was faster for me to do it this way than with a loop.\n",
    "df[\"sentencing_date_clean\"] = df[\"sentencing_date_clean\"].str.replace(\"291\", \"201\")\n",
    "df[\"sentencing_date_clean\"] = df[\"sentencing_date_clean\"].str.replace(\"221\", \"201\")\n",
    "df[\"sentencing_date_clean\"] = df[\"sentencing_date_clean\"].str.replace(\"220\", \"200\")  \n",
    "df[\"sentencing_date_clean\"] = df[\"sentencing_date_clean\"].str.replace(\"211\", \"201\")\n",
    "df[\"sentencing_date_clean\"] = df[\"sentencing_date_clean\"].str.replace(\"210\", \"200\")\n",
    "\n",
    "df[\"sentenceymd_derived\"] = pd.to_datetime(df[\"sentencing_date_clean\"], errors=\"coerce\")\n",
    "df[\"sentenceym_derived\"] = df[\"sentenceymd_derived\"].dt.to_period(\"M\").dt.to_timestamp()\n",
    "\n",
    "## since we no longer need this cleaned date column anymore:\n",
    "df = df.drop(columns=[\"sentencing_date_clean\"])\n",
    "\n",
    "## Checks - we hope to not see any wonky years:\n",
    "#df[\"sentenceymd_derived\"].dt.year.unique()\n",
    "#df[\"sentenceym_derived\"].dt.year.unique()\n",
    "#df[[\"SENTENCE_DATE\", \"sentenceymd_derived\", \"sentenceym_derived\"]].sample(20)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Sentencing Judge:\n",
    "df[\"judges_cleaned\"] = df[\"SENTENCE_JUDGE\"].astype(str)\n",
    "\n",
    "## Dealing with Doug and Shelley:\n",
    "is_doug = df[\"SENTENCE_JUDGE\"].str.contains(\"Douglas\", case=False, na=False) & df[\"SENTENCE_JUDGE\"].str.contains(\"Simpson\", case=False, na=False)\n",
    "\n",
    "is_shelley = df[\"SENTENCE_JUDGE\"].str.contains(\"Sutker-\", case=False, na=False)\n",
    "\n",
    "df.loc[is_doug, \"judges_cleaned\"] = \"Doug Simpson\"\n",
    "df.loc[is_shelley, \"judges_cleaned\"] = \"Shelley Sutker\"\n",
    "\n",
    "\n",
    "## Check we cleaned Doug and Shelley's names the right way:\n",
    "#df[df[\"SENTENCE_JUDGE\"].str.contains(\"Simpson\", case=False, na=False)][[\"SENTENCE_JUDGE\", \"judges_cleaned\"]].drop_duplicates()\n",
    "#df[df[\"SENTENCE_JUDGE\"].str.contains(\"Sutker\", case=False, na=False)][[\"SENTENCE_JUDGE\", \"judges_cleaned\"]].drop_duplicates()\n",
    "\n",
    "## To do the rest of judgeid:\n",
    "##list of unique judge names\n",
    "judge_names = list(df[\"judges_cleaned\"].unique())\n",
    "\n",
    "## Looked up how to use name split online, since I was having trouble figuring out how \n",
    "## to split by spaces given lots of judges have middle names included.\n",
    "judge_names.sort(key=lambda name: (name.split()[0].lower(), name.split()[-1].lower()))\n",
    "\n",
    "## we add 1 to i so that we start counting judges at 1, not 0; the length of judge_names tells\n",
    "## us how many unique judges there are, so we can code by this\n",
    "judge_ids = [\"judge_\" + str(i + 1) for i in range(len(judge_names))]\n",
    "\n",
    "judge_id_dict = dict(zip(judge_names, judge_ids))\n",
    "\n",
    "df[\"judgeid_derived\"] = df[\"judges_cleaned\"].map(judge_id_dict)\n",
    "\n",
    "## since we no longer need the cleaned judge column anymore:\n",
    "df = df.drop(columns=[\"judges_cleaned\"])\n",
    "\n",
    "## Check - we hope to see unique judges have only one judgeid_derived value and that \n",
    "## first names early on in the alphabet correspond to low ID numbers. We also want the output\n",
    "## to show that every judge in judges_cleaned column has exactly one unique judgeid_derived. \n",
    "#df[[\"SENTENCE_JUDGE\", \"judgeid_derived\"]].sample(20)\n",
    "#df.groupby(\"judges_cleaned\")[\"judgeid_derived\"].nunique().value_counts()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>RACE</th>\n",
       "      <th>is_black_derived</th>\n",
       "      <th>is_hisp_derived</th>\n",
       "      <th>is_white_derived</th>\n",
       "      <th>is_othereth_derived</th>\n",
       "      <th>GENDER</th>\n",
       "      <th>is_male_derived</th>\n",
       "      <th>AGE_AT_INCIDENT</th>\n",
       "      <th>age_derived</th>\n",
       "      <th>SENTENCE_DATE</th>\n",
       "      <th>sentenceymd_derived</th>\n",
       "      <th>sentenceym_derived</th>\n",
       "      <th>SENTENCE_JUDGE</th>\n",
       "      <th>judgeid_derived</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>71482</th>\n",
       "      <td>Black</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>Female</td>\n",
       "      <td>False</td>\n",
       "      <td>47.0</td>\n",
       "      <td>47.0</td>\n",
       "      <td>11/26/2013 12:00:00 AM</td>\n",
       "      <td>2013-11-26</td>\n",
       "      <td>2013-11-01</td>\n",
       "      <td>James Michael Obbish</td>\n",
       "      <td>judge_123</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>78757</th>\n",
       "      <td>White [Hispanic or Latino]</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>Male</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6/25/2013 12:00:00 AM</td>\n",
       "      <td>2013-06-25</td>\n",
       "      <td>2013-06-01</td>\n",
       "      <td>Larry G Axelrood</td>\n",
       "      <td>judge_176</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>181267</th>\n",
       "      <td>White</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>Male</td>\n",
       "      <td>True</td>\n",
       "      <td>33.0</td>\n",
       "      <td>33.0</td>\n",
       "      <td>3/3/2017 12:00:00 AM</td>\n",
       "      <td>2017-03-03</td>\n",
       "      <td>2017-03-01</td>\n",
       "      <td>Gregory Robert Ginex</td>\n",
       "      <td>judge_99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>242072</th>\n",
       "      <td>Black</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>Male</td>\n",
       "      <td>True</td>\n",
       "      <td>22.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1/25/2021 12:00:00 AM</td>\n",
       "      <td>2021-01-25</td>\n",
       "      <td>2021-01-01</td>\n",
       "      <td>Joan Margaret O'Brien</td>\n",
       "      <td>judge_135</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>128224</th>\n",
       "      <td>Black</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>Male</td>\n",
       "      <td>True</td>\n",
       "      <td>35.0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>8/31/2016 12:00:00 AM</td>\n",
       "      <td>2016-08-31</td>\n",
       "      <td>2016-08-01</td>\n",
       "      <td>Araujo, Mauricio</td>\n",
       "      <td>judge_17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95116</th>\n",
       "      <td>Black</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>Male</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8/30/2013 12:00:00 AM</td>\n",
       "      <td>2013-08-30</td>\n",
       "      <td>2013-08-01</td>\n",
       "      <td>Thaddeus L Wilson</td>\n",
       "      <td>judge_300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>104048</th>\n",
       "      <td>White</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>Male</td>\n",
       "      <td>True</td>\n",
       "      <td>30.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>12/17/2014 12:00:00 AM</td>\n",
       "      <td>2014-12-17</td>\n",
       "      <td>2014-12-01</td>\n",
       "      <td>Brian K Flaherty</td>\n",
       "      <td>judge_21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28203</th>\n",
       "      <td>White</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>Female</td>\n",
       "      <td>False</td>\n",
       "      <td>56.0</td>\n",
       "      <td>56.0</td>\n",
       "      <td>3/19/2012 12:00:00 AM</td>\n",
       "      <td>2012-03-19</td>\n",
       "      <td>2012-03-01</td>\n",
       "      <td>John Joseph Hynes</td>\n",
       "      <td>judge_142</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>216005</th>\n",
       "      <td>Black</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>Male</td>\n",
       "      <td>True</td>\n",
       "      <td>36.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>5/24/2018 12:00:00 AM</td>\n",
       "      <td>2018-05-24</td>\n",
       "      <td>2018-05-01</td>\n",
       "      <td>Thomas J Hennelly</td>\n",
       "      <td>judge_308</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>74911</th>\n",
       "      <td>Black</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>Male</td>\n",
       "      <td>True</td>\n",
       "      <td>17.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>5/18/2018 12:00:00 AM</td>\n",
       "      <td>2018-05-18</td>\n",
       "      <td>2018-05-01</td>\n",
       "      <td>Michele M Pitman</td>\n",
       "      <td>judge_230</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                              RACE  is_black_derived  is_hisp_derived  \\\n",
       "71482                        Black              True            False   \n",
       "78757   White [Hispanic or Latino]             False             True   \n",
       "181267                       White             False            False   \n",
       "242072                       Black              True            False   \n",
       "128224                       Black              True            False   \n",
       "95116                        Black              True            False   \n",
       "104048                       White             False            False   \n",
       "28203                        White             False            False   \n",
       "216005                       Black              True            False   \n",
       "74911                        Black              True            False   \n",
       "\n",
       "        is_white_derived  is_othereth_derived  GENDER  is_male_derived  \\\n",
       "71482              False                False  Female            False   \n",
       "78757              False                False    Male             True   \n",
       "181267              True                False    Male             True   \n",
       "242072             False                False    Male             True   \n",
       "128224             False                False    Male             True   \n",
       "95116              False                False    Male             True   \n",
       "104048              True                False    Male             True   \n",
       "28203               True                False  Female            False   \n",
       "216005             False                False    Male             True   \n",
       "74911              False                False    Male             True   \n",
       "\n",
       "        AGE_AT_INCIDENT  age_derived           SENTENCE_DATE  \\\n",
       "71482              47.0         47.0  11/26/2013 12:00:00 AM   \n",
       "78757               NaN          NaN   6/25/2013 12:00:00 AM   \n",
       "181267             33.0         33.0    3/3/2017 12:00:00 AM   \n",
       "242072             22.0         22.0   1/25/2021 12:00:00 AM   \n",
       "128224             35.0         35.0   8/31/2016 12:00:00 AM   \n",
       "95116               NaN          NaN   8/30/2013 12:00:00 AM   \n",
       "104048             30.0         30.0  12/17/2014 12:00:00 AM   \n",
       "28203              56.0         56.0   3/19/2012 12:00:00 AM   \n",
       "216005             36.0         36.0   5/24/2018 12:00:00 AM   \n",
       "74911              17.0         17.0   5/18/2018 12:00:00 AM   \n",
       "\n",
       "       sentenceymd_derived sentenceym_derived         SENTENCE_JUDGE  \\\n",
       "71482           2013-11-26         2013-11-01   James Michael Obbish   \n",
       "78757           2013-06-25         2013-06-01       Larry G Axelrood   \n",
       "181267          2017-03-03         2017-03-01   Gregory Robert Ginex   \n",
       "242072          2021-01-25         2021-01-01  Joan Margaret O'Brien   \n",
       "128224          2016-08-31         2016-08-01       Araujo, Mauricio   \n",
       "95116           2013-08-30         2013-08-01      Thaddeus L Wilson   \n",
       "104048          2014-12-17         2014-12-01       Brian K Flaherty   \n",
       "28203           2012-03-19         2012-03-01      John Joseph Hynes   \n",
       "216005          2018-05-24         2018-05-01      Thomas J Hennelly   \n",
       "74911           2018-05-18         2018-05-01       Michele M Pitman   \n",
       "\n",
       "       judgeid_derived  \n",
       "71482        judge_123  \n",
       "78757        judge_176  \n",
       "181267        judge_99  \n",
       "242072       judge_135  \n",
       "128224        judge_17  \n",
       "95116        judge_300  \n",
       "104048        judge_21  \n",
       "28203        judge_142  \n",
       "216005       judge_308  \n",
       "74911        judge_230  "
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## print a random sample of 10 rows \n",
    "df[[\"RACE\", \"is_black_derived\", \"is_hisp_derived\", \"is_white_derived\", \"is_othereth_derived\", \"GENDER\", \"is_male_derived\", \n",
    "    \"AGE_AT_INCIDENT\", \"age_derived\", \"SENTENCE_DATE\", \"sentenceymd_derived\", \"sentenceym_derived\", \"SENTENCE_JUDGE\", \"judgeid_derived\"]].sample(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1.4: Subsetting rows to analytic dataset (5 points)\n",
    "\n",
    "You decide based on the above to simplify things in the following ways:\n",
    "    \n",
    "- Subset to cases where only one participant is charged, since cases with >1 participant might have complications like \n",
    "plea bargains/informing from other participants affecting the sentencing of the focal participant\n",
    "\n",
    "- To go from a participant-case level dataset, where each participant is repeated across charges tied to the case, to a participant-level dataset, where each participant has one charge, subset to a participant's primary charge and their current sentence (`PRIMARY_CHARGE_FLAG` is True and `CURRENT_SENTENCE_FLAG` is True). Double check that this worked by confirming there are no longer multiple charges for the same case-participant\n",
    "\n",
    "- Filter out observations where judge is nan or nonsensical (indicated by is.null or equal to FLOOD)\n",
    "\n",
    "- Subset to sentencing date between 01-01-2012 and 04-05-2021 (inclusive)\n",
    "\n",
    "After completing these steps, print the number of rows in the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "## subset to cases where only one participant is charged\n",
    "participants_per_case = df.groupby(\"CASE_ID\")[\"CASE_PARTICIPANT_ID\"].nunique()\n",
    "single_participant_cases = df[df[\"CASE_ID\"].isin(participants_per_case[participants_per_case == 1].index)]\n",
    "\n",
    "## Check:\n",
    "#participants_per_case_subset = single_participant_cases.groupby(\"CASE_ID\")[\"CASE_PARTICIPANT_ID\"].nunique()\n",
    "#print(participants_per_case_subset[participants_per_case_subset > 1])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "## go from participant-case level data to a participant's primary charge and current sentence\n",
    "primary_current = single_participant_cases[\n",
    "    (single_participant_cases[\"PRIMARY_CHARGE_FLAG\"] == True) &\n",
    "    (single_participant_cases[\"CURRENT_SENTENCE_FLAG\"] == True)]\n",
    "\n",
    "## Check:\n",
    "#participant_charge_counts = primary_current.groupby(\"CASE_PARTICIPANT_ID\").size()\n",
    "#multiple_charges = participant_charge_counts[participant_charge_counts > 1]\n",
    "#print(f\"Number of participants with multiple charges: {len(multiple_charges)}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Filter out observations where judge is nan or nonsensical:\n",
    "valid_judges = primary_current[\"SENTENCE_JUDGE\"].notna() & (primary_current[\"SENTENCE_JUDGE\"].str.strip().str.upper() != \"FLOOD\")\n",
    "\n",
    "primary_current = primary_current[valid_judges == True]\n",
    "\n",
    "## Check:\n",
    "#print(\"NaN judge count:\", primary_current[\"SENTENCE_JUDGE\"].isna().sum())\n",
    "#flood_judges = primary_current[\"SENTENCE_JUDGE\"].str.strip().str.upper() == \"FLOOD\"\n",
    "#print(\"FLOOD judge count:\", flood_judges.sum())\n",
    "\n",
    "## To see if any other null words appear for judges\n",
    "#null_strings = [\"null\", \"none\", \"nan\", \"na\", \"n/a\", \"\"]\n",
    "\n",
    "#judge_col = primary_current[\"SENTENCE_JUDGE\"].astype(str).str.strip().str.lower()\n",
    "#fake_null_judges = judge_col.isin(null_strings)\n",
    "\n",
    "#print(\"Fake 'null' judge count:\", fake_null_judges.sum())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Subset to sentencing date between 01-01-2012 and 04-05-2021 (inclusive)\n",
    "\n",
    "start_date = pd.to_datetime(\"2012-01-01\")\n",
    "end_date = pd.to_datetime(\"2021-04-05\")\n",
    "\n",
    "filtered_data = primary_current[(primary_current[\"sentenceymd_derived\"] >= start_date) &\n",
    "(primary_current[\"sentenceymd_derived\"] <= end_date)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "135165"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## print number of rows in data\n",
    "len(filtered_data)\n",
    "\n",
    "## Check to see whether our cleaned data matched the version we read in for part 2:\n",
    "#filtered_data.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Part two: investigating Black vs. White sentencing disparities\n",
    "\n",
    "Now that the data are cleaned, we're going to investigate different types of disparities in sentencing between Black defendants and White defendants. We're focusing on these groups for the purpose of the problem set, but the analysis could be extended to study Hispanic defendants or, in a different jurisdiction, Asian and other minoritized groups.\n",
    "\n",
    "**Details if interested in digging deeper**: If interested (optional), you can read more technical coverage of how we might (1) measure disparities, and (2) what factors you want to adjust for when deciding whether two defendants are 'similarly situated' but for their race in the following sources:\n",
    "\n",
    "- [Review of sentencing disparities research](https://www.journals.uchicago.edu/doi/full/10.1086/701505)\n",
    "- [Discussion of causal model/blinding race at charging stage of the prosecutorial process](https://5harad.com/papers/blind-charging.pdf)\n",
    "- [Discussion of measuring discrimination in policing that can generalize to the sentencing case](https://www.annualreviews.org/doi/abs/10.1146/annurev-criminol-011518-024731)\n",
    "- [General discussion of causal challenges in measuring between-group disparities](https://osf.io/preprints/socarxiv/gx4y3/)\n",
    "\n",
    "**One major caveat**: when investigating whether two similar defendants received different sentences, we're missing one important attribute that influences sentencing: the defendant's criminal history. This influences sentencing both through sentencing guidelines, which can prescribe longer sentences for those who have certain types of prior convictions, and through judicial discretion if judges are more lenient with first-time defendants. The above sources discuss how much we want to \"control away\" for this prior history, since if we think there are racial biases in which defendants, conditional on *committing* a crime, are arrested and charged, we may not want to adjust for that factor. More discussion [in this article](https://www.themarshallproject.org/2019/12/03/the-growing-racial-disparity-in-prison-time)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2.0: (0 points)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First, read in the following dataset (regardless of progress on part one): `sentencing_cleaned.pkl` (if you can't read in the pkl you can read in the .csv format but may need to recast some of the datetime columns)\n",
    "\n",
    "*Note*: don't worry if there are slight differences in your output from Part One and this dataset/it's not a good use of time to try to reverse engineer Part One answers from this cleaned data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CASE_ID</th>\n",
       "      <th>CASE_PARTICIPANT_ID</th>\n",
       "      <th>RECEIVED_DATE</th>\n",
       "      <th>OFFENSE_CATEGORY</th>\n",
       "      <th>PRIMARY_CHARGE_FLAG</th>\n",
       "      <th>CHARGE_ID</th>\n",
       "      <th>CHARGE_VERSION_ID</th>\n",
       "      <th>DISPOSITION_CHARGED_OFFENSE_TITLE</th>\n",
       "      <th>CHARGE_COUNT</th>\n",
       "      <th>DISPOSITION_DATE</th>\n",
       "      <th>...</th>\n",
       "      <th>simplified_offense_derived</th>\n",
       "      <th>is_black_derived</th>\n",
       "      <th>is_hisp_derived</th>\n",
       "      <th>is_white_derived</th>\n",
       "      <th>is_other_derived</th>\n",
       "      <th>is_male_derived</th>\n",
       "      <th>age_derived</th>\n",
       "      <th>sentenceymd_derived</th>\n",
       "      <th>sentenceym_derived</th>\n",
       "      <th>judgeid_derived</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>149765331439</td>\n",
       "      <td>175691153649</td>\n",
       "      <td>8/15/1984 12:00:00 AM</td>\n",
       "      <td>PROMIS Conversion</td>\n",
       "      <td>True</td>\n",
       "      <td>50510062193</td>\n",
       "      <td>112898098217</td>\n",
       "      <td>FIRST DEGREE MURDER</td>\n",
       "      <td>1</td>\n",
       "      <td>12/17/2014 12:00:00 AM</td>\n",
       "      <td>...</td>\n",
       "      <td>Homicide</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>27.0</td>\n",
       "      <td>2014-10-16</td>\n",
       "      <td>2014-10-01</td>\n",
       "      <td>judge_40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>150065796098</td>\n",
       "      <td>162105612284</td>\n",
       "      <td>8/23/1984 12:00:00 AM</td>\n",
       "      <td>PROMIS Conversion</td>\n",
       "      <td>True</td>\n",
       "      <td>50792360681</td>\n",
       "      <td>113332130159</td>\n",
       "      <td>FIRST DEGREE MURDER</td>\n",
       "      <td>1</td>\n",
       "      <td>8/6/2014 12:00:00 AM</td>\n",
       "      <td>...</td>\n",
       "      <td>Homicide</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>30.0</td>\n",
       "      <td>2014-08-06</td>\n",
       "      <td>2014-08-01</td>\n",
       "      <td>judge_310</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>154954734978</td>\n",
       "      <td>225758446387</td>\n",
       "      <td>6/8/2001 12:00:00 AM</td>\n",
       "      <td>PROMIS Conversion</td>\n",
       "      <td>True</td>\n",
       "      <td>54885211141</td>\n",
       "      <td>174293345821</td>\n",
       "      <td>VIO BAIL BOND/CLASS 1</td>\n",
       "      <td>1</td>\n",
       "      <td>12/2/2013 12:00:00 AM</td>\n",
       "      <td>...</td>\n",
       "      <td>PROMIS Conversion</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>38.0</td>\n",
       "      <td>2013-12-02</td>\n",
       "      <td>2013-12-01</td>\n",
       "      <td>judge_162</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>155222744754</td>\n",
       "      <td>217349881776</td>\n",
       "      <td>1/31/2001 12:00:00 AM</td>\n",
       "      <td>PROMIS Conversion</td>\n",
       "      <td>True</td>\n",
       "      <td>53899906462</td>\n",
       "      <td>280120721775</td>\n",
       "      <td>POSS AMT CON SUB EXCEPT (A)/(D)</td>\n",
       "      <td>1</td>\n",
       "      <td>9/10/2012 12:00:00 AM</td>\n",
       "      <td>...</td>\n",
       "      <td>Narcotics</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>33.0</td>\n",
       "      <td>2012-09-10</td>\n",
       "      <td>2012-09-01</td>\n",
       "      <td>judge_331</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>155327892699</td>\n",
       "      <td>217212381455</td>\n",
       "      <td>2/6/2001 12:00:00 AM</td>\n",
       "      <td>PROMIS Conversion</td>\n",
       "      <td>True</td>\n",
       "      <td>53938518259</td>\n",
       "      <td>164877860811</td>\n",
       "      <td>DUI LIC SUSPENDED OR REVOKED (EFFECTIVE 4-13-2...</td>\n",
       "      <td>1</td>\n",
       "      <td>9/19/2014 12:00:00 AM</td>\n",
       "      <td>...</td>\n",
       "      <td>PROMIS Conversion</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>49.0</td>\n",
       "      <td>2014-09-19</td>\n",
       "      <td>2014-09-01</td>\n",
       "      <td>judge_314</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>248141</th>\n",
       "      <td>445516248775</td>\n",
       "      <td>905289187184</td>\n",
       "      <td>2/3/2021 12:00:00 AM</td>\n",
       "      <td>Home Invasion</td>\n",
       "      <td>True</td>\n",
       "      <td>447867029248</td>\n",
       "      <td>836341344232</td>\n",
       "      <td>AGGRAVATED UNLAWFUL USE OF WEAPON</td>\n",
       "      <td>1</td>\n",
       "      <td>3/19/2021 12:00:00 AM</td>\n",
       "      <td>...</td>\n",
       "      <td>UUW - Unlawful Use of Weapon</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>19.0</td>\n",
       "      <td>2021-03-19</td>\n",
       "      <td>2021-03-01</td>\n",
       "      <td>judge_8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>248142</th>\n",
       "      <td>445527409730</td>\n",
       "      <td>905322500577</td>\n",
       "      <td>2/4/2021 12:00:00 AM</td>\n",
       "      <td>Domestic Battery</td>\n",
       "      <td>True</td>\n",
       "      <td>447970697900</td>\n",
       "      <td>836537247156</td>\n",
       "      <td>DOMESTIC BATTERY</td>\n",
       "      <td>1</td>\n",
       "      <td>3/23/2021 12:00:00 AM</td>\n",
       "      <td>...</td>\n",
       "      <td>Battery</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>32.0</td>\n",
       "      <td>2021-03-23</td>\n",
       "      <td>2021-03-01</td>\n",
       "      <td>judge_294</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>248143</th>\n",
       "      <td>445587767000</td>\n",
       "      <td>905518794790</td>\n",
       "      <td>2/9/2021 12:00:00 AM</td>\n",
       "      <td>Driving With Suspended Or Revoked License</td>\n",
       "      <td>True</td>\n",
       "      <td>447955866546</td>\n",
       "      <td>837760215766</td>\n",
       "      <td>DRIVING ON SUSPENDED LICENSE</td>\n",
       "      <td>1</td>\n",
       "      <td>3/11/2021 12:00:00 AM</td>\n",
       "      <td>...</td>\n",
       "      <td>Driving With Suspended Or Revoked License</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>29.0</td>\n",
       "      <td>2021-03-11</td>\n",
       "      <td>2021-03-01</td>\n",
       "      <td>judge_99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>248144</th>\n",
       "      <td>445592613204</td>\n",
       "      <td>905533705601</td>\n",
       "      <td>2/9/2021 12:00:00 AM</td>\n",
       "      <td>Driving With Suspended Or Revoked License</td>\n",
       "      <td>True</td>\n",
       "      <td>447966223356</td>\n",
       "      <td>837758347354</td>\n",
       "      <td>DRIVING ON SUSPENDED LICENSE</td>\n",
       "      <td>1</td>\n",
       "      <td>3/11/2021 12:00:00 AM</td>\n",
       "      <td>...</td>\n",
       "      <td>Driving With Suspended Or Revoked License</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>29.0</td>\n",
       "      <td>2021-03-11</td>\n",
       "      <td>2021-03-01</td>\n",
       "      <td>judge_99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>248145</th>\n",
       "      <td>445593200623</td>\n",
       "      <td>905535215556</td>\n",
       "      <td>2/9/2021 12:00:00 AM</td>\n",
       "      <td>Driving With Suspended Or Revoked License</td>\n",
       "      <td>True</td>\n",
       "      <td>447966323908</td>\n",
       "      <td>837759561822</td>\n",
       "      <td>DRIVING ON SUSPENDED LICENSE</td>\n",
       "      <td>1</td>\n",
       "      <td>3/21/2021 12:00:00 AM</td>\n",
       "      <td>...</td>\n",
       "      <td>Driving With Suspended Or Revoked License</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>30.0</td>\n",
       "      <td>2021-03-11</td>\n",
       "      <td>2021-03-01</td>\n",
       "      <td>judge_99</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>135165 rows Ã— 52 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             CASE_ID  CASE_PARTICIPANT_ID          RECEIVED_DATE  \\\n",
       "9       149765331439         175691153649  8/15/1984 12:00:00 AM   \n",
       "16      150065796098         162105612284  8/23/1984 12:00:00 AM   \n",
       "18      154954734978         225758446387   6/8/2001 12:00:00 AM   \n",
       "19      155222744754         217349881776  1/31/2001 12:00:00 AM   \n",
       "26      155327892699         217212381455   2/6/2001 12:00:00 AM   \n",
       "...              ...                  ...                    ...   \n",
       "248141  445516248775         905289187184   2/3/2021 12:00:00 AM   \n",
       "248142  445527409730         905322500577   2/4/2021 12:00:00 AM   \n",
       "248143  445587767000         905518794790   2/9/2021 12:00:00 AM   \n",
       "248144  445592613204         905533705601   2/9/2021 12:00:00 AM   \n",
       "248145  445593200623         905535215556   2/9/2021 12:00:00 AM   \n",
       "\n",
       "                                 OFFENSE_CATEGORY  PRIMARY_CHARGE_FLAG  \\\n",
       "9                               PROMIS Conversion                 True   \n",
       "16                              PROMIS Conversion                 True   \n",
       "18                              PROMIS Conversion                 True   \n",
       "19                              PROMIS Conversion                 True   \n",
       "26                              PROMIS Conversion                 True   \n",
       "...                                           ...                  ...   \n",
       "248141                              Home Invasion                 True   \n",
       "248142                           Domestic Battery                 True   \n",
       "248143  Driving With Suspended Or Revoked License                 True   \n",
       "248144  Driving With Suspended Or Revoked License                 True   \n",
       "248145  Driving With Suspended Or Revoked License                 True   \n",
       "\n",
       "           CHARGE_ID  CHARGE_VERSION_ID  \\\n",
       "9        50510062193       112898098217   \n",
       "16       50792360681       113332130159   \n",
       "18       54885211141       174293345821   \n",
       "19       53899906462       280120721775   \n",
       "26       53938518259       164877860811   \n",
       "...              ...                ...   \n",
       "248141  447867029248       836341344232   \n",
       "248142  447970697900       836537247156   \n",
       "248143  447955866546       837760215766   \n",
       "248144  447966223356       837758347354   \n",
       "248145  447966323908       837759561822   \n",
       "\n",
       "                        DISPOSITION_CHARGED_OFFENSE_TITLE  CHARGE_COUNT  \\\n",
       "9                                     FIRST DEGREE MURDER             1   \n",
       "16                                    FIRST DEGREE MURDER             1   \n",
       "18                                  VIO BAIL BOND/CLASS 1             1   \n",
       "19                        POSS AMT CON SUB EXCEPT (A)/(D)             1   \n",
       "26      DUI LIC SUSPENDED OR REVOKED (EFFECTIVE 4-13-2...             1   \n",
       "...                                                   ...           ...   \n",
       "248141                  AGGRAVATED UNLAWFUL USE OF WEAPON             1   \n",
       "248142                                   DOMESTIC BATTERY             1   \n",
       "248143                       DRIVING ON SUSPENDED LICENSE             1   \n",
       "248144                       DRIVING ON SUSPENDED LICENSE             1   \n",
       "248145                       DRIVING ON SUSPENDED LICENSE             1   \n",
       "\n",
       "              DISPOSITION_DATE  ...  \\\n",
       "9       12/17/2014 12:00:00 AM  ...   \n",
       "16        8/6/2014 12:00:00 AM  ...   \n",
       "18       12/2/2013 12:00:00 AM  ...   \n",
       "19       9/10/2012 12:00:00 AM  ...   \n",
       "26       9/19/2014 12:00:00 AM  ...   \n",
       "...                        ...  ...   \n",
       "248141   3/19/2021 12:00:00 AM  ...   \n",
       "248142   3/23/2021 12:00:00 AM  ...   \n",
       "248143   3/11/2021 12:00:00 AM  ...   \n",
       "248144   3/11/2021 12:00:00 AM  ...   \n",
       "248145   3/21/2021 12:00:00 AM  ...   \n",
       "\n",
       "                       simplified_offense_derived is_black_derived  \\\n",
       "9                                        Homicide             True   \n",
       "16                                       Homicide             True   \n",
       "18                              PROMIS Conversion            False   \n",
       "19                                      Narcotics             True   \n",
       "26                              PROMIS Conversion            False   \n",
       "...                                           ...              ...   \n",
       "248141               UUW - Unlawful Use of Weapon             True   \n",
       "248142                                    Battery             True   \n",
       "248143  Driving With Suspended Or Revoked License            False   \n",
       "248144  Driving With Suspended Or Revoked License            False   \n",
       "248145  Driving With Suspended Or Revoked License            False   \n",
       "\n",
       "       is_hisp_derived is_white_derived is_other_derived is_male_derived  \\\n",
       "9                False            False            False            True   \n",
       "16               False            False            False            True   \n",
       "18                True            False            False            True   \n",
       "19               False            False            False           False   \n",
       "26               False             True            False            True   \n",
       "...                ...              ...              ...             ...   \n",
       "248141           False            False            False           False   \n",
       "248142           False            False            False            True   \n",
       "248143           False             True            False            True   \n",
       "248144           False             True            False            True   \n",
       "248145           False             True            False            True   \n",
       "\n",
       "       age_derived sentenceymd_derived sentenceym_derived judgeid_derived  \n",
       "9             27.0          2014-10-16         2014-10-01        judge_40  \n",
       "16            30.0          2014-08-06         2014-08-01       judge_310  \n",
       "18            38.0          2013-12-02         2013-12-01       judge_162  \n",
       "19            33.0          2012-09-10         2012-09-01       judge_331  \n",
       "26            49.0          2014-09-19         2014-09-01       judge_314  \n",
       "...            ...                 ...                ...             ...  \n",
       "248141        19.0          2021-03-19         2021-03-01         judge_8  \n",
       "248142        32.0          2021-03-23         2021-03-01       judge_294  \n",
       "248143        29.0          2021-03-11         2021-03-01        judge_99  \n",
       "248144        29.0          2021-03-11         2021-03-01        judge_99  \n",
       "248145        30.0          2021-03-11         2021-03-01        judge_99  \n",
       "\n",
       "[135165 rows x 52 columns]"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#df_cleaned = pd.read_pickle(\"sentencing_cleaned.pkl\")\n",
    "\n",
    "## Comment out if not Sammi \n",
    "##df_cleaned = pd.read_pickle(\"pset1_inputdata/sentencing_cleaned.pkl\")\n",
    "\n",
    "\n",
    "## Comment out if not Ella\n",
    "df_cleaned = pd.read_pickle(\"/Users/ellascarola/QSS20/data & graphs/sentencing_cleaned.pkl\")\n",
    "\n",
    "df_cleaned"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2.1: Investigating one type of between-group difference: who reaches the sentencing stage? (5 points)\n",
    "\n",
    "Tabulate and visualize the proportion of defendants, out of all defendants sentenced in a given month/year, who are Black and who are White (separate proportions)\n",
    "\n",
    "- Denominator is number of unique cases that month\n",
    "- Numerator for black defendants is count of is_black_derived\n",
    "- Numerator for white defendants is count of is_white_derived\n",
    "- Fraction of each is numerator/denominator\n",
    "\n",
    "- Print the table\n",
    "- Create a graph with two lines--- one for Black defendants as fraction of total; another for White defendants. Make sure it includes a legend summarizing which color is for which group, and clean the legend so that it has informative names (e.g., Black or White rather than prop_black or prop_white)\n",
    "- Use mathematical notation to write out each of the proportions using summation notation in a 1-2 sentence writeup describing trends. What seems to be going on in April and May 2020? \n",
    "\n",
    "**Optional challenge**: improve the viz by shading the background of the visualization for months with fewer than 100 cases \n",
    "\n",
    "**Optional challenge**: improve the viz by adding a vertical line for 12-01-2016, the month that new State's Attorney Foxx took office "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>month_year</th>\n",
       "      <th>black_proportion</th>\n",
       "      <th>white_proportion</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2012-01-01</td>\n",
       "      <td>0.677419</td>\n",
       "      <td>0.144564</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2012-02-01</td>\n",
       "      <td>0.648966</td>\n",
       "      <td>0.160690</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2012-03-01</td>\n",
       "      <td>0.638958</td>\n",
       "      <td>0.158189</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2012-04-01</td>\n",
       "      <td>0.696379</td>\n",
       "      <td>0.146936</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2012-05-01</td>\n",
       "      <td>0.695146</td>\n",
       "      <td>0.144337</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>106</th>\n",
       "      <td>2020-11-01</td>\n",
       "      <td>0.606925</td>\n",
       "      <td>0.154786</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>107</th>\n",
       "      <td>2020-12-01</td>\n",
       "      <td>0.646182</td>\n",
       "      <td>0.158287</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>108</th>\n",
       "      <td>2021-01-01</td>\n",
       "      <td>0.621924</td>\n",
       "      <td>0.111857</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>109</th>\n",
       "      <td>2021-02-01</td>\n",
       "      <td>0.651731</td>\n",
       "      <td>0.134420</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110</th>\n",
       "      <td>2021-03-01</td>\n",
       "      <td>0.680451</td>\n",
       "      <td>0.148496</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>111 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    month_year  black_proportion  white_proportion\n",
       "0   2012-01-01          0.677419          0.144564\n",
       "1   2012-02-01          0.648966          0.160690\n",
       "2   2012-03-01          0.638958          0.158189\n",
       "3   2012-04-01          0.696379          0.146936\n",
       "4   2012-05-01          0.695146          0.144337\n",
       "..         ...               ...               ...\n",
       "106 2020-11-01          0.606925          0.154786\n",
       "107 2020-12-01          0.646182          0.158287\n",
       "108 2021-01-01          0.621924          0.111857\n",
       "109 2021-02-01          0.651731          0.134420\n",
       "110 2021-03-01          0.680451          0.148496\n",
       "\n",
       "[111 rows x 3 columns]"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## tabulate and visualize the proportion of defendants who are Black and White; print table\n",
    "total_month_year = df_cleaned.groupby(\"sentenceym_derived\")[\"CASE_ID\"].nunique()\n",
    "\n",
    "## we use \"size\" because we want to count the number of rows where is_black_derived or is_white_derived\n",
    "## is true for every year-month\n",
    "black_month_year = df_cleaned[df_cleaned[\"is_black_derived\"]==True].groupby(\"sentenceym_derived\").size()\n",
    "white_month_year = df_cleaned[df_cleaned[\"is_white_derived\"]==True].groupby(\"sentenceym_derived\").size()\n",
    "\n",
    "## printing the table by making a new data frame\n",
    "prop_table = pd.DataFrame()\n",
    "prop_table[\"black_proportion\"] = black_month_year / total_month_year\n",
    "prop_table[\"white_proportion\"] = white_month_year / total_month_year\n",
    "\n",
    "## reset index and rename column so it looks better:\n",
    "prop_table = prop_table.reset_index().rename(columns = {\"sentenceym_derived\": \"month_year\"})\n",
    "\n",
    "prop_table\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 1200x800 with 0 Axes>"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x168cc1100>]"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x169fb1460>]"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "(array([14975., 15340., 15706., 16071., 16436., 16801., 17167., 17532.,\n",
       "        17897., 18262., 18628.]),\n",
       " [Text(14975.0, 0, '2011'),\n",
       "  Text(15340.0, 0, '2012'),\n",
       "  Text(15706.0, 0, '2013'),\n",
       "  Text(16071.0, 0, '2014'),\n",
       "  Text(16436.0, 0, '2015'),\n",
       "  Text(16801.0, 0, '2016'),\n",
       "  Text(17167.0, 0, '2017'),\n",
       "  Text(17532.0, 0, '2018'),\n",
       "  Text(17897.0, 0, '2019'),\n",
       "  Text(18262.0, 0, '2020'),\n",
       "  Text(18628.0, 0, '2021')])"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "(array([0. , 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8]),\n",
       " [Text(0, 0.0, '0.0'),\n",
       "  Text(0, 0.1, '0.1'),\n",
       "  Text(0, 0.2, '0.2'),\n",
       "  Text(0, 0.30000000000000004, '0.3'),\n",
       "  Text(0, 0.4, '0.4'),\n",
       "  Text(0, 0.5, '0.5'),\n",
       "  Text(0, 0.6000000000000001, '0.6'),\n",
       "  Text(0, 0.7000000000000001, '0.7'),\n",
       "  Text(0, 0.8, '0.8')])"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'Month/Year')"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Proportion of Total Defendants Sentenced')"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Proportion of Black and White Defendants Sentenced Over Time')"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x31eeac7d0>"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "## Create a graph with two lines--- one for Black defendants as fraction of total; another for White defendants. \n",
    "\n",
    "plt.figure(figsize=(12,8))\n",
    "## Black defendants line plot:\n",
    "plt.plot(prop_table.month_year, prop_table.black_proportion,\n",
    "         label=\"Black\", color=\"cornflowerblue\")\n",
    "plt.plot(prop_table.month_year, prop_table.white_proportion,\n",
    "         label=\"White\", color=\"firebrick\")\n",
    "\n",
    "plt.xticks(fontsize=15)\n",
    "plt.yticks(fontsize=15)\n",
    "plt.xlabel(\"Month/Year\", fontsize=15)\n",
    "plt.ylabel(\"Proportion of Total Defendants Sentenced\", fontsize=15)\n",
    "\n",
    "plt.title(\"Proportion of Black and White Defendants Sentenced Over Time\", fontsize=18)\n",
    "plt.legend(title=\"Defendant Race\", fontsize=15, title_fontsize=15)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Use mathematical notation to write out each of the proportions using summation notation in a 1-2 sentence writeup describing trends.** \n",
    "\n",
    "\n",
    "As seen from this in our code...\n",
    "#prop_table[\"black_proportion\"] = black_month_year / total_month_year\n",
    "#prop_table[\"white_proportion\"] = white_month_year / total_month_year\n",
    "\n",
    "\n",
    "$$ {\\frac{ \\sum \\text {white cases}} {\\sum \\text {total cases}}} $$ \n",
    "$$ {\\frac{ \\sum \\text {black cases}} {\\sum \\text {total cases}}} $$ \n",
    "\n",
    "The proportion of black and white defendants is calculated by dividing the number of Black or White defendants in each month by the total number of unique cases in that same month. When we put these proportions over time in the graph, we see that a lower proportion of White defendants is sentenced, and this trend suggests a disparity overtime, and thus one that is likely systemic.\n",
    "\n",
    "\n",
    "\n",
    "**What seems to be going on in April and May 2020?**\n",
    "\n",
    "In April and May 2020, there is a noticeable decrease in the proportion of Black defendants\n",
    "and a noticeable increase in the proportion of White defendants sentenced compared to other months.\n",
    "Perhaps this was in response to the Black Lives Matter movement, which drew attention to \n",
    "discrimination on the basis of race in criminal justice proceedings.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2.2: Investigating the first type of disparity: probation versus incaceration (10 points)\n",
    "\n",
    "One type of disparity beyond who arrives at the sentencing stage is whether the defendant receives probation or incaceration.\n",
    "\n",
    "According to the codebook, incarceration is indicated by `COMMITMENT_TYPE` == \"Illinois Department of Corrections\"\n",
    "\n",
    "Recreate the previous plot but where the y axis represents the difference between the following proportions (can be either Black - White or White - Black but make sure to label), adding a smoothed line:\n",
    "\n",
    "- Percent of black defendants who are incarcerated out of all black defendants that month/year \n",
    "- Percent of white defendants who are incarcerated out of all white defendants that month/year \n",
    "\n",
    "In a markdown cell after, write 1-2 sentences on your observations of trends over time. Do gaps seem to be widening or increasing?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Making the table\n",
    "\n",
    "df_cleaned['is_incarc'] = df_cleaned['COMMITMENT_TYPE'] == \"Illinois Department of Corrections\"\n",
    "\n",
    "\n",
    "## Then look at total defendants per month/year vs those incarcerated for Black and White defendants\n",
    "black_month_year = df_cleaned[df_cleaned[\"is_black_derived\"]==True].groupby(\"sentenceym_derived\").size()\n",
    "black_incarc_month_year = df_cleaned[(df_cleaned[\"is_black_derived\"] == True) & (df_cleaned[\"is_incarc\"] == True)].groupby(\"sentenceym_derived\").size()\n",
    "\n",
    "white_month_year = df_cleaned[df_cleaned[\"is_white_derived\"]==True].groupby(\"sentenceym_derived\").size()\n",
    "white_incarc_month_year = df_cleaned[(df_cleaned[\"is_white_derived\"] == True) & (df_cleaned[\"is_incarc\"] == True)].groupby(\"sentenceym_derived\").size()\n",
    "\n",
    "\n",
    "## printing the table by making a new data frame\n",
    "incar_prop_table = pd.DataFrame()\n",
    "incar_prop_table[\"black_proportion_incarcerated\"] = black_incarc_month_year / black_month_year\n",
    "incar_prop_table[\"white_proportion_incarcerated\"] = white_incarc_month_year / white_month_year\n",
    "incar_prop_table[\"difference_black_white\"] = incar_prop_table[\"black_proportion_incarcerated\"] - incar_prop_table[\"white_proportion_incarcerated\"]\n",
    "\n",
    "## reset index and rename column so it looks better:\n",
    "incar_prop_table = incar_prop_table.reset_index().rename(columns = {\"sentenceym_derived\": \"month_year\"})\n",
    "new_table = incar_prop_table.fillna(0)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>month_year</th>\n",
       "      <th>black_proportion_incarcerated</th>\n",
       "      <th>white_proportion_incarcerated</th>\n",
       "      <th>difference_black_white</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2012-01-01</td>\n",
       "      <td>0.594356</td>\n",
       "      <td>0.359504</td>\n",
       "      <td>0.234852</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2012-02-01</td>\n",
       "      <td>0.601488</td>\n",
       "      <td>0.373391</td>\n",
       "      <td>0.228097</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2012-03-01</td>\n",
       "      <td>0.584466</td>\n",
       "      <td>0.443137</td>\n",
       "      <td>0.141329</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2012-04-01</td>\n",
       "      <td>0.598000</td>\n",
       "      <td>0.445498</td>\n",
       "      <td>0.152502</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2012-05-01</td>\n",
       "      <td>0.539106</td>\n",
       "      <td>0.327354</td>\n",
       "      <td>0.211752</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>106</th>\n",
       "      <td>2020-11-01</td>\n",
       "      <td>0.409396</td>\n",
       "      <td>0.302632</td>\n",
       "      <td>0.106764</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>107</th>\n",
       "      <td>2020-12-01</td>\n",
       "      <td>0.489914</td>\n",
       "      <td>0.376471</td>\n",
       "      <td>0.113443</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>108</th>\n",
       "      <td>2021-01-01</td>\n",
       "      <td>0.496403</td>\n",
       "      <td>0.440000</td>\n",
       "      <td>0.056403</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>109</th>\n",
       "      <td>2021-02-01</td>\n",
       "      <td>0.425000</td>\n",
       "      <td>0.196970</td>\n",
       "      <td>0.228030</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110</th>\n",
       "      <td>2021-03-01</td>\n",
       "      <td>0.397790</td>\n",
       "      <td>0.202532</td>\n",
       "      <td>0.195258</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>111 rows Ã— 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    month_year  black_proportion_incarcerated  white_proportion_incarcerated  \\\n",
       "0   2012-01-01                       0.594356                       0.359504   \n",
       "1   2012-02-01                       0.601488                       0.373391   \n",
       "2   2012-03-01                       0.584466                       0.443137   \n",
       "3   2012-04-01                       0.598000                       0.445498   \n",
       "4   2012-05-01                       0.539106                       0.327354   \n",
       "..         ...                            ...                            ...   \n",
       "106 2020-11-01                       0.409396                       0.302632   \n",
       "107 2020-12-01                       0.489914                       0.376471   \n",
       "108 2021-01-01                       0.496403                       0.440000   \n",
       "109 2021-02-01                       0.425000                       0.196970   \n",
       "110 2021-03-01                       0.397790                       0.202532   \n",
       "\n",
       "     difference_black_white  \n",
       "0                  0.234852  \n",
       "1                  0.228097  \n",
       "2                  0.141329  \n",
       "3                  0.152502  \n",
       "4                  0.211752  \n",
       "..                      ...  \n",
       "106                0.106764  \n",
       "107                0.113443  \n",
       "108                0.056403  \n",
       "109                0.228030  \n",
       "110                0.195258  \n",
       "\n",
       "[111 rows x 4 columns]"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 1200x800 with 0 Axes>"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x174ed1370>]"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "(array([14975., 15340., 15706., 16071., 16436., 16801., 17167., 17532.,\n",
       "        17897., 18262., 18628.]),\n",
       " [Text(14975.0, 0, '2011'),\n",
       "  Text(15340.0, 0, '2012'),\n",
       "  Text(15706.0, 0, '2013'),\n",
       "  Text(16071.0, 0, '2014'),\n",
       "  Text(16436.0, 0, '2015'),\n",
       "  Text(16801.0, 0, '2016'),\n",
       "  Text(17167.0, 0, '2017'),\n",
       "  Text(17532.0, 0, '2018'),\n",
       "  Text(17897.0, 0, '2019'),\n",
       "  Text(18262.0, 0, '2020'),\n",
       "  Text(18628.0, 0, '2021')])"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "(array([-0.6, -0.4, -0.2,  0. ,  0.2,  0.4,  0.6]),\n",
       " [Text(0, -0.6000000000000001, 'âˆ’0.6'),\n",
       "  Text(0, -0.4000000000000001, 'âˆ’0.4'),\n",
       "  Text(0, -0.20000000000000007, 'âˆ’0.2'),\n",
       "  Text(0, 0.0, '0.0'),\n",
       "  Text(0, 0.19999999999999996, '0.2'),\n",
       "  Text(0, 0.3999999999999999, '0.4'),\n",
       "  Text(0, 0.6000000000000001, '0.6')])"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'Month/Year')"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Difference in Incarceration Proportion (Black - White)')"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x173ddbbc0>"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Difference in Proportion of Black and White Defendants Incarcerated')"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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W4fANbOAmgWQLGYWFBUVBfSvovz973/X8uXL1adPH23dulUzZ87UypUr9fzzz+vw4cMaP368z8eaNGmStm3bplGjRmnLli2aOXOmNmzYoDvvvFPbt2/X5MmTg/hKAAAAAMB3zmCB5Ft2gfM6jawCOFXbkZCfn69XXnlFkvTvf/9b8fHx5rbJkyera9euWrp0qX755Zdyj3XgwAG9//77ioyM1GuvvaaIiD8SMp599lnVr19f77//vg4ePGj/CwEAAAAAP1kNFpBVAKdqGyxYtmyZjh8/rtatW6tHjx6lto8ePVqSNGfOnHKPtWDBAhUVFal///5q2LCh27bo6GgNHz5chYWFWrBggT2NBwAAAIAA+BsscNYsILMATgGNhA0bNui2225Tly5dlJSUpOTkZHXp0kW33367NmzYYFcbLVm3bp0kqWfPnh63Ox937ldRxwIAAACAYGMaAgJlqcChJL388su6//77VVhY6FY589ixY9q4caPeeustPfvss7r77rttaai/9uzZI0lKTU31uN35uHO/ijoWAAAAAAQb0xAQKEtho2+++UaTJk1SVFSUJk2apDVr1igjI0PHjx/X2rVrde+99yo6OlqTJ0/WokWL7G6zT7KzsyVJsbGxHrfHxcW57VcRx8rNzVVmZqbbPwAAAACwG5kFCJSlkfDCCy8oIiJCX3/9tZ577jl169ZNiYmJSkhIUNeuXfXss8/q66+/VlhYmJ5//nm72+wTZ7aDt8iYazZERR3r6aefVmJiovmvadOmPrcBAAAAAHxFzQIEytJIWLVqlQYMGKBzzz3X6z59+vTRwIEDtXLlSsuNC0Tt2rUlSSdPnvS4/dSpU5LktkpCsI/18MMP68SJE+a/vXv3lntuAAAAAPAXmQUIlKWaBadOnVL9+vXL3a9+/frmhXRFa9asmSRp3759Hrc7H3fuVxHHio6OVnR0dLnnAwAAAIBAULMAgbIUNmratKlWrFhR5qArKCjQihUrKi3Vvlu3bpKk1atXe9zufLxr164VeiwAAAAACDYyCxAoSyNhxIgR2r17tyZOnOixSF9mZqZuvvlm7dmzRyNHjgy0jZb07dtXiYmJ+v3337VmzZpS22fNmiVJuvTSS8s91sUXX6ywsDB9//33OnTokNu23NxczZkzR2FhYRo6dKg9jQcAAACAAFCzAIGyNBIefvhhtWzZUjNmzFDz5s01duxY/d///Z8eeeQRjR07Vs2aNdP06dPVsmVLPfzww3a32SdRUVG64447JEl33HGHW72BF154Qb/++qv69euns846y3z81VdfVYcOHUq1OSUlRddcc43y8vJ02223qaCgwNz2wAMP6PDhw7r22mvVqFGjIL8qAAAAACifa7DA9frFGzILUJKlmgX16tXT0qVL9ec//1nz5s3Thx9+WGqfSy65RG+++abq1q0bcCOteuSRR7Rw4UItX75cbdu21Xnnnafdu3dr5cqVSkpK0tSpU932P3LkiLZs2aL09PRSx3rppZf0448/6pNPPlGHDh3Uq1cvbdy4URs2bFDr1q314osvVtTLAgAAAIAyUbMAgbIULJCkJk2aaM6cOdq5c6eWLVumtLQ0SVLjxo3Vr18/tWzZ0rZGWhUTE6PFixfr6aef1gcffKDPPvtMdevW1Y033qgnn3zSr3oKycnJ+umnn/TYY4/ps88+0+zZs9WwYUPdcccdevzxx1WvXr0gvhIAAAAA8B3TEBAoh+EcFX7o2bOnWrdurY8//jgYbaoxMjMzlZiYqBMnTighIaGymwMAAACgmli1apUWLFggSRo5cqRZtN2bJ554QoZhqHHjxrr55psroomoJL5eh1oKG23ZskWRkZGWGwcAAAAACB5/MgsMwyCzAKVYGglt27bV0aNH7W4LAAAAAMAG/gYLnKhZACdLwYIJEybou+++0+bNm+1uDwAAAAAgQP4EC5zFDSUyC/AHSyPhzjvv1Lhx4zRgwAC9+OKL2r59u/Ly8uxuGwAAAADAAoIFCJSl1RCcA88wDN1333267777vO7rcDh8WtcTAAAAAGAPpiEgUJaCBU2bNmUQAQAAAECIioj441KPzAJYYSlYsGvXLpubAQAAAACwC9MQEChGAgAAAABUMwQLECifR0JBQYFee+01XXjhherYsaO6d++uG264QT/88EMw2wcAAAAA8BM1CxAon6Yh5Ofn68ILL9TSpUvdBtKvv/6qDz74QK+99pr+9Kc/Ba2RAAAAAADfkVmAQPk0Ev71r3/pu+++U0JCgh5//HF98cUXev/993XVVVepqKhId999tw4cOBDstgIAAAAAfECwAIHyKbNg5syZioqK0nfffaeuXbuaj19zzTVq3ry5nn32Wc2ePVu33npr0BoKAAAAAPCN1WkIBAvg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+eYbJScn+/S86OhoRUdH+30+AAAAALCKzAJYUW1HQ7du3SRJq1evLrUtPz9fGzZsUHR0tNq3b+/XcZ9++mk999xzatCggb755hsyAwAAAACENGoWwApLmQUlHT9+XFlZWV7rAFi5ex+oSy65REuXLtWsWbN03XXXuW2bO3eucnJyNGzYMI9FGb35z3/+o7/85S+qU6eOvvrqK78DDQAAAABQ0QgWwArLo+HAgQOaOHGi6tevr6SkJLVo0UItW7Ys9a9Vq1Z2ttdnEydOVEJCgj7//HN9+umn5uOHDh3SAw88IElu9QOcOnTooA4dOmj//v1uj8+aNUu33nqr4uPjNX/+fHXv3j2o7QcAAAAAO1CzAFZYyixIT0/XWWedpbS0NDVp0kT169fXoUOH1KdPH+3YsUMHDx6Uw+FQnz59FBkZaXebfVKvXj29++67uvLKKzV69GgNGDBAycnJWrhwoY4fP6677rpLgwcPLvU8Z1HF/Px887FDhw5p7NixKioqUsuWLfXmm2/qzTffLPXckSNHauTIkUF7TQAAAADgL2oWwApLwYKnnnpKaWlpeuKJJ/TII4/opptu0owZM/TDDz9IkpYuXapbb71VDodDCxYssLXB/rjiiiu0dOlSPfXUU/rxxx+Vl5enjh076vbbb9dNN93k83FOnTqlvLw8SdL69eu1fv16j/u1aNGCYAEAAACAkEKwAFZYChZ8+eWXatmypR555BGP2/v376+vv/5a7du315NPPqm//e1vATUyEH379vUrYOGp7kKLFi281mMAAAAAgFBGzQJYYWk07N+/323OvnPw5ebmmo81adJEgwYN0kcffRRYCwEAAAAAllGzAFZYChYkJCS4RaDq1KkjSaWKAsbExJR6DAAAAABQcZiGACssjYZmzZpp165d5u+dO3eWJM2fP9987NSpU/rhhx+UkpISWAsBAAAAAJYRLIAVlmoWnH/++XrppZd08OBBNWzYUJdddpni4uJ03333ae/evUpNTdV///tfHTx4ULfeeqvdbQYAAAAA+Mg1WFBQUOC2jZoF8MZSsGDs2LHau3evNm3apIYNG6pevXp68803ddNNN+nZZ5+Vw+GQYRg644wzKrW4IQAAAADUdNQsgBWWggXdunXThx9+6PbYNddco759+2r+/PnKyMhQu3btdNlllykyMtKWhgIAAAAA/Mc0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X1+pqamlntOzZ09J0q+//lohbWvUqFFQz1PRQrXP8/PzNWXKFEnS0KFDg3aeihYq/f36669r+fLlmjFjhtmO6ihU+vvkyZP629/+pj179ig2NlY9evTQqFGjFB8fb9s5QkFl97fzy9WQIUN04sQJffDBB1q/fr2ioqJ01llnafTo0T5dbFUlld3n3vz3v/+VJF1zzTVm4Lc6qOz+HjRokCIiIjRz5kzdc889at++vbntxRdf1PHjx3XttddWm3Fe2f198uRJSVLdunVLbYuLi1N0dLRyc3O1bt06NW3aNODzVbaK6m9v36nXrVvndkxP5/r222+1bt06jwGcqqiy+7y6IVhQzb388suSpIsvvtj8Q7dnzx5J8vhmkYo/rOvUqaOMjAxlZWWpdu3atrcrPz9fr732miRpxIgRth+/MoVSn0+YMEGFhYXKyMjQL7/8ov379+vcc8/1u7p/KAuF/k5LS9PDDz+sQYMG6frrrw/oWKEuFPpbko4cOaJHHnnE7bHJkydr+vTpuuSSSwI+fqio7P7euHGjpOLK0506dSp1B+Wvf/2r5s6dq06dOlk+R6ip7D73JCcnR5988okkVbvPmMru7zZt2ui5557TpEmT1KVLF/Xv319JSUn67bfftHnzZo0dO1ZvvPGG5eOHmsru7/r16ystLU27d+9Wx44d3bYdOHBAubm5kqRdu3ZZPkcoqYj+/v33380Mgssuu8xtW3nncj7u3K86qOw+r26YhlCNzZ8/X++8844iIyP15JNPmo87lxOJjY31+ty4uDi3fe3217/+VZs2bVLLli2r5NJy3oRan0+fPl3Tp0/XF198of3796t///56//33lZSUZNs5KlOo9Pftt9+unJwcvf766wEfK5SFSn/fcMMN+vLLL7V//35lZ2drzZo1uv7663X06FGNGjVKq1atCvgcoSAU+jsjI0OS9OSTT6pWrVpauHChMjMztW7dOl1wwQXauXOnLr30Up0+fTqg84SKUOhzT7744gudOHFCZ5xxhnr06GH78StLqPT33XffrQ8++ECRkZFatGiRPvroI23YsEHNmjXT+eefX20ylkKhvwcMGCBJmjZtWqltrsuwZmVlBXSeUFAR/V1QUKBx48YpNzdXV111lc4880y37eWdK9jf9ytaKPR5dUOwoJratGmTrrvuOhmGoWeffdZtrqlhGJKK1yr3xrlPMHz44Yf65z//qZiYGH3wwQdlvnGrklDs84KCAhmGobS0NH388cdKS0tTly5d9NVXX9l+rooWKv396aef6rPPPtNDDz3klr5a3YRKf0vFQbCLLrpIjRs3VlxcnLp3764ZM2bo4YcfVl5eXqmMg6ooVPq7sLDQPN6cOXM0ePBg1a5dW127dtXcuXOVmpqqnTt36v3337flfJUpVPrcE+cUhOqUVRAq/W0YhiZNmqRrrrlGN9xwg7Zu3ars7GytXLlSjRs31oQJE3TffffZcq7KFCr9ff/99ysyMlIzZ87Ugw8+qL179+rw4cN6/fXX9cQTTygiojjpOSysal+iVFR/33nnnVq2bJlatWplZux6Oo63cwXzc6uihUqfVzdV+50Ij/bt26eLL75YGRkZmjx5su6++2637c7UGue8MU9OnTolSbZH07/55huNGzdOYWFh+vDDD3XOOefYevzKEsp9LkkpKSkaPXq0Fi5cKIfDoXHjxlXpKHKo9HdmZqbuvPNOtW3bVg8//LDl44S6UOnv8jz44IMKDw/XkiVLlJeXF7TzBFso9bfzXOecc06plOHo6Ghde+21koqL71VlodTnJR09elRffvmlwsLCzP6u6kKpv6dPn66XXnpJI0eO1Ouvv662bdsqLi5OvXv31vz589WkSRO9+OKL2rx5c0DnqUyh1N89evTQ9OnTVatWLf3zn/9Us2bN1KBBA912220699xzzZRuTzUNqoqK6u8nnnhCb7zxhho2bKivvvrKY72k8s5VEX+bK0Io9Xl1Q82CaubIkSMaMmSI9uzZo5tuuknPPfdcqX2aNWsmqfiN5cnJkyd1/Phx1alTx9Z5lytXrtTll1+u/Px8vfPOOxo5cqRtx65ModznJTVv3lznnXee5s+fr1WrVun8888P2rmCJZT6e/Xq1UpLS1OLFi108cUXu207cOCApOL04c2bN6tNmzZ6++23LZ+rsoRSf5cnMTFRDRo0UHp6uo4cOaLGjRsH7VzBEmr93aJFC0nFnx1lbT906FBA56lModbnJc2cOVP5+fkaNGhQtSj4Fmr9/d5770nyXCG9du3auvjii/XOO+9o6dKl6tChQ0Dnqgyh1t9ScZHOgQMHaubMmdqyZYuio6M1YMAAjRgxQn369JEknXHGGQGfpzJUVH//+9//1mOPPabExER9+eWXatOmjcf9mjVrpjVr1ng9l/NxZ5uqolDr8+qGYEE1kpWVpaFDh2rz5s0aNWqU3nrrLY/pNu3bt1d0dLQOHz6sffv2lSr2sXr1aklS165dbWvbxo0bNWzYMJ08eVIvvPCCbrrpJtuOXZlCuc+9SU5OliQdPnw46OeyW6j2965du7wWY0pPT1d6erqOHz9uy7kqUqj2tzdFRUXKzMyUVDXvkoRif/fo0UNTp07VsWPHPG53LktVFftbCs0+L6k6TUEIxf52XjwkJCR43O583Nt7IJSFYn87paSk6J577nF77NixY1qzZo1q167ttXp/KKuo/n7//fd15513KjY2VvPmzVP37t29tqlbt276/PPPzWOWVJHfP4MhFPu8umEaQjWRm5urESNG6Oeff9ZFF12kDz/80OvSSrVq1TLvKM+aNavUdudjl156qS1t27Vrly688EIdO3ZMU6ZM0aRJk2w5bmUL5T73prCwUMuWLZMktW7dOqjnslso9vfAgQNlGIbHf85CTbfccosMw9DatWsDOldFC8X+Ls+XX36pkydPqk2bNl6/+IeqUO3v4cOHy+Fw6KeffvKYvumcflAVv9iHap+72rFjh1asWKFatWrpiiuusPXYFS1U+9u57NnPP//scftPP/0k6Y8smqoiVPu7LK+88ory8/N1/fXXq1atWkE9l90qqr/nz5+vcePGKTIyUrNnz1bfvn3LbJdzdaA5c+aYK004HTx4UN9//70SExPVr1+/8l9kiAnVPq92DFR5BQUFxuWXX25IMs477zzj5MmT5T7nm2++MSQZSUlJxtatW83Hly9fbkRHRxsJCQnG0aNHyzzGY489Zkgynn76aa/7HDx40GjTpo0hybj33nt9f1EhLpT7fMaMGcb3339f6vGjR48a48ePNyQZXbp0MYqKisptc6gI5f72ZurUqYYk45ZbbvH7uZUtlPv7448/NrZs2VLq8SVLlhiNGzc2JBkvvPBCue0NJaHc34ZhGFdffbUhybj55puN/Px88/G3337bkGTExMQYe/bsKbfNoSTU+9zp8ccfNyQZV199tU/7h6pQ7u8XXnjBkGTEx8cbK1eudNv2yiuvGJKM2rVrl3uuUBLK/W0YhvHTTz+Veuy9994zIiMjjeTkZOPw4cPltjeUVFR/L1u2zKhVq5YRERFhzJ492+f29e3b15Bk3H333eZj+fn5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GjRooOHDh+vss8/Wxo0bdfvtt2v8+PFe+3rp0qXq16+fdu3apQsvvFD9+/dXWBhf1wAAlcAAAADVkiQjOjraMAzDeOONNwxJxvTp083tTzzxhCHJ+Oqrr4z09HRDktG8eXO3Y6xatcoICwszateubaxcudJ8PCcnxxgzZowhyRgzZozbcx577DFDkiHJeOaZZ9y23XPPPYYk4/rrr3d7fOrUqYYk47HHHvP4WhYvXmwe84orrjCys7PNbZ999pkhyWjWrJnH515xxRVGRESEcezYsVLb8vPzje7duxuSjN69exuSjEsvvdTcXlBQYHTu3NmQZLz88stGUVGRuW316tVGUlKSERcXZxw8eNDtmJ988omRm5vrdq5Dhw4ZvXr1MiQZ3333nc99BgBAZSBUDQBADXDllVcqKirKbVWE999/X40aNdLgwYO9Pu/VV19VUVGR7rnnHvXu3dt8PDo6Wq+++qpq1aqlTz75RPv37y/13H79+umBBx5we+yRRx6RJI/p+75ISEjQf/7zH8XFxZmPjRgxQl26dNGePXu0a9cut/3z8vL09ddfq2/fvqpbt26p40VEROjtt99WeHi4Vq1apdq1a+v11183t8+ZM0cbNmzQNddco7vuuksOh8Pc1qNHD/31r3/VyZMn3aZ4REREaNSoUYqKinI7V/369fX0009Lkj7//HOPr69z5866//77fe8QAACCJKKyGwAAAIKvbt26GjZsmObMmaMDBw5o79692rJliyZNmqTw8HCvz/v+++8lFdc9KKlBgwa68MIL9fnnn2v58uUaM2aM2/YLL7yw1HOSkpKUlJSk9PR0S6+jV69e5vQAV+3atdP69euVnp6uFi1amI8vXrxYWVlZuuyyy7we88wzz9Tll1+uWbNm6ZZbblFqaqq57ZtvvpEkjRw50uNz+/XrJ0n66aefSm1bu3atvv76a+3evVunTp2SYRjKysqSJLNGQknDhw93C0gAAFBZCBYAAFBDXHfddfrss8/0v//9Tzt37jQfK0taWpocDoeaN2/ucbvzwjwtLa3UNteLblfx8fE6evSoHy337ZhScb0AV3PmzJGkUvUKSnJmKrhmLEgyMxWuuuoqXXXVVV6ff+TIEfPnvLw8jRs3Th9++KHX/Z1Bg5KaNWtWZjsBAKgoBAsAAKghLr30UtWpU0czZsxQWlqaOnbsqJ49e9pybE93w4Nxh9zfY86ZM0ft27dX27ZtLZ2vsLBQkjR06FA1aNDA634dOnQwf37hhRf04YcfqnPnznr22WfVs2dP1a1bV5GRkdq6davat28vwzA8HicmJsZSOwEAsBvBAgAAaojo6GiNHj3aXDXgrrvuKvc5jRs31s6dO7V79261b9++1Pbdu3dLklJSUuxtrA3WrVunPXv26L777rN8DGcmw5///OcypzK4mj17tiSZAQNXO3bssNwWAAAqEgUOAQCoQW644QYlJSUpOTnZYx2Cks477zxJciuM6HT48GF9/fXXCgsL07nnnhtQu5zFAAsKCgI6jqsvvvhCkny+yPfkggsukCR99tlnPj8nIyNDktS0adNS2z766CPLbQEAoCIRLAAAoAY577zzdOTIER0+fNhrHQJXt99+u8LCwvTyyy/r559/Nh/Py8vTnXfeqVOnTmnUqFFq0qRJQO1q3LixJGnLli0BHcfVnDlzVK9evYACGaNHj1aHDh00bdo0PfPMM8rPz3fbnpeXp08//VTr1683H2vXrp0k6Y033nDbd9asWZoxY4bltgAAUJEIFgAAAK969+6tJ598UpmZmerTp4+GDBmia665Rm3atNHMmTPVtm1bvfrqqwGf55xzzlGDBg00a9YsDRw4UOPHj9fEiRO1fPlyS8dLT0/Xzz//rGHDhpW52kN5IiIiNHv2bDVt2lQPPfSQmjdvrosvvlhXXnml+vTpo4YNG+qKK67Q77//bj7ngQceUHh4uB566CH16tVL1157rc466yyNGTNGkyZNstwWAAAqEsECAABQpr/85S+aO3euBgwYoJ9++kmffvqpoqOj9cADD2jlypVq2LBhwOeIiYnRvHnzNGTIEK1du1bTpk3TO++8o61bt1o63ty5c2UYRrmrIPiiQ4cOWrt2raZMmaIGDRpo2bJlmjdvng4fPqz+/ftr6tSp5nQFSerfv7+WLVum888/Xzt27NDcuXMVFRWlTz75RLfffnvA7QEAoCI4DG/leAEAAKqo4cOH66uvvtKRI0eUkJBQ2c0BAKDKYTUEAABQ7Zx33nm69NJLCRQAAGARmQUAAAAAAMANNQsAAAAAAIAbggUAAAAAAMANwQIAAAAAAOCGYAEAAAAAAHBDsAAAAAAAALghWAAAAAAAANwQLAAAAAAAAG4IFgAAAAAAADcECwAAAAAAgBuCBQAAAAAAwM3/AznJ5qbXyGvvAAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 1200x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "## Recreate the previous plot but where the y axis represents the difference between the following proportions \n",
    "## (can be either Black - White or White - Black but make sure to label), adding a smoothed line:\n",
    "\n",
    "\n",
    "plt.figure(figsize=(12,8))\n",
    "\n",
    "\n",
    "## used rolling instead of sns because month_year is not the write type\n",
    "plt.plot(new_table[\"month_year\"], (new_table[\"black_proportion_incarcerated\"] - new_table[\"white_proportion_incarcerated\"]),\n",
    "         label=\"Incarcerated Difference (B-W)\", color=\"gray\", lw=2)\n",
    "\n",
    "\n",
    "plt.xticks(fontsize=15)\n",
    "plt.yticks(fontsize=15)\n",
    "plt.xlabel(\"Month/Year\", fontsize=15)\n",
    "plt.ylabel(\"Difference in Incarceration Proportion (Black - White)\", fontsize=15)\n",
    "plt.legend()\n",
    "plt.title(\"Difference in Proportion of Black and White Defendants Incarcerated\", fontsize=18)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Write 1-2 sentences on your observations of trends over time. Do gaps seem to be widening or increasing?**\n",
    "\n",
    "We observe a fairly stable gap in incarceration rates over time. However, after 2020, we see a temporary narrowing of the gap in black incarceration and white incarceration rates. By 2021, the gap seems to revert to the original pattern pre-2020. This suggests the significant narrowing of 2020 was caused by a response to one particular event that year, perhaps BLM movement."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2.3: Investigating mechanisms: incaceration rates by charge\n",
    "\n",
    "Your colleague sees the previous graph and is worried that the gap could be different---either wider or smaller---if you adjust for the fact that prosecutors have discretion in what crimes to charge defendants with. If white defendants are charged with crimes that tend to receive probation rather than incarceration, that could explain some of the gaps.\n",
    "\n",
    "In the next questions, you'll begin to investigate this."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.3.1: Find the most common offenses (3 points)\n",
    "\n",
    "First, create a set of 'frequent offenses' that represent (over the entire period) the union of the 10 offenses Black defendant are most likely to be charged with and the 10 offenses white defendants are most likely to be charged with (might be far less than 20 total if there's a lot of overlap in common charges)\n",
    "\n",
    "Use the `simplified_offense_derived` for this"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'Battery', 'Theft', 'Burglary', 'Other Offense', 'Narcotics', 'Residential Burglary', 'UUW - Unlawful Use of Weapon', 'DUI', 'Robbery', 'Retail Theft', 'Vehicle-related', 'Driving With Suspended Or Revoked License'}\n"
     ]
    }
   ],
   "source": [
    "common_black = (df_cleaned[df_cleaned[\"is_black_derived\"]==True]\n",
    "               [\"simplified_offense_derived\"]\n",
    "                .value_counts()\n",
    "                .sort_values(ascending=False)\n",
    "                .head(10))\n",
    "## Check:\n",
    "#common_black\n",
    "\n",
    "common_white = (df_cleaned[df_cleaned[\"is_white_derived\"]==True]\n",
    "               [\"simplified_offense_derived\"]\n",
    "                .value_counts()\n",
    "                .sort_values(ascending=False)\n",
    "                .head(10))\n",
    "\n",
    "## Check:\n",
    "#common_white\n",
    "\n",
    "## set turns both data frames into sets so we can combine them into one union\n",
    "## we need .index in order to just grab the information for offense rather than the count\n",
    "frequent_offenses = set(common_black.index).union(set(common_white.index))\n",
    "print(frequent_offenses)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.3.2: Look at incarceration rates (again just whether incarcerated) by race and offense type for these top offenses (3 points)\n",
    "\n",
    "Print a wide-format version of the resulting table (so each row is an offense type, one col is black incarceration rate for that offense type; another is the white incarceration rate) and interpret. Which offenses show the largest disparities in judges being less likely to sentence White defendants to incarceration/more likely to offer those defendants probation?\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>black incarceration rate</th>\n",
       "      <th>white incarceration rate</th>\n",
       "      <th>Black - White</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>simplified_offense_derived</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Battery</th>\n",
       "      <td>0.509032</td>\n",
       "      <td>0.275552</td>\n",
       "      <td>0.233480</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Burglary</th>\n",
       "      <td>0.661927</td>\n",
       "      <td>0.535763</td>\n",
       "      <td>0.126164</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DUI</th>\n",
       "      <td>0.404997</td>\n",
       "      <td>0.341855</td>\n",
       "      <td>0.063143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Driving With Suspended Or Revoked License</th>\n",
       "      <td>0.582193</td>\n",
       "      <td>0.496552</td>\n",
       "      <td>0.085642</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Narcotics</th>\n",
       "      <td>0.537876</td>\n",
       "      <td>0.242535</td>\n",
       "      <td>0.295341</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Other Offense</th>\n",
       "      <td>0.340580</td>\n",
       "      <td>0.230228</td>\n",
       "      <td>0.110351</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Residential Burglary</th>\n",
       "      <td>0.717791</td>\n",
       "      <td>0.654114</td>\n",
       "      <td>0.063677</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Retail Theft</th>\n",
       "      <td>0.595713</td>\n",
       "      <td>0.449582</td>\n",
       "      <td>0.146132</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Robbery</th>\n",
       "      <td>0.650341</td>\n",
       "      <td>0.589286</td>\n",
       "      <td>0.061055</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Theft</th>\n",
       "      <td>0.386961</td>\n",
       "      <td>0.318721</td>\n",
       "      <td>0.068240</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>UUW - Unlawful Use of Weapon</th>\n",
       "      <td>0.696191</td>\n",
       "      <td>0.481973</td>\n",
       "      <td>0.214217</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vehicle-related</th>\n",
       "      <td>0.553750</td>\n",
       "      <td>0.585635</td>\n",
       "      <td>-0.031885</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                           black incarceration rate  \\\n",
       "simplified_offense_derived                                            \n",
       "Battery                                                    0.509032   \n",
       "Burglary                                                   0.661927   \n",
       "DUI                                                        0.404997   \n",
       "Driving With Suspended Or Revoked License                  0.582193   \n",
       "Narcotics                                                  0.537876   \n",
       "Other Offense                                              0.340580   \n",
       "Residential Burglary                                       0.717791   \n",
       "Retail Theft                                               0.595713   \n",
       "Robbery                                                    0.650341   \n",
       "Theft                                                      0.386961   \n",
       "UUW - Unlawful Use of Weapon                               0.696191   \n",
       "Vehicle-related                                            0.553750   \n",
       "\n",
       "                                           white incarceration rate  \\\n",
       "simplified_offense_derived                                            \n",
       "Battery                                                    0.275552   \n",
       "Burglary                                                   0.535763   \n",
       "DUI                                                        0.341855   \n",
       "Driving With Suspended Or Revoked License                  0.496552   \n",
       "Narcotics                                                  0.242535   \n",
       "Other Offense                                              0.230228   \n",
       "Residential Burglary                                       0.654114   \n",
       "Retail Theft                                               0.449582   \n",
       "Robbery                                                    0.589286   \n",
       "Theft                                                      0.318721   \n",
       "UUW - Unlawful Use of Weapon                               0.481973   \n",
       "Vehicle-related                                            0.585635   \n",
       "\n",
       "                                           Black - White  \n",
       "simplified_offense_derived                                \n",
       "Battery                                         0.233480  \n",
       "Burglary                                        0.126164  \n",
       "DUI                                             0.063143  \n",
       "Driving With Suspended Or Revoked License       0.085642  \n",
       "Narcotics                                       0.295341  \n",
       "Other Offense                                   0.110351  \n",
       "Residential Burglary                            0.063677  \n",
       "Retail Theft                                    0.146132  \n",
       "Robbery                                         0.061055  \n",
       "Theft                                           0.068240  \n",
       "UUW - Unlawful Use of Weapon                    0.214217  \n",
       "Vehicle-related                                -0.031885  "
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## First filter data for only top offenses and create an is_incarcerated column\n",
    "df_filtered = df_cleaned[df_cleaned[\"simplified_offense_derived\"].isin(frequent_offenses)].copy()\n",
    "df_filtered[\"is_incarcerated\"] = df_filtered[\"COMMITMENT_TYPE\"] == \"Illinois Department of Corrections\"\n",
    "\n",
    "## calculate Black incarceration rates by filtering for Black defendants and then\n",
    "## calculating the mean of \"is_incarcerated\" for each offense in the the frequent offenses list:\n",
    "black_incarceration = (df_filtered[df_filtered[\"is_black_derived\"]==True]\n",
    "                      .groupby(\"simplified_offense_derived\")\n",
    "                       [\"is_incarcerated\"].mean()\n",
    "                      .rename(\"black incarceration rate\"))\n",
    "\n",
    "## calculate White incarceration rates by filtering for White defendants and then\n",
    "## calculating the mean of \"is_incarcerated\" for each offense in the the frequent offenses list:\n",
    "white_incarceration = (df_filtered[df_filtered[\"is_white_derived\"]==True]\n",
    "                      .groupby(\"simplified_offense_derived\")\n",
    "                       [\"is_incarcerated\"].mean()\n",
    "                      .rename(\"white incarceration rate\"))\n",
    "\n",
    "table = pd.concat([black_incarceration, white_incarceration], axis=1)\n",
    "\n",
    "table[\"Black - White\"] = (table[\"black incarceration rate\"] - table[\"white incarceration rate\"])\n",
    "\n",
    "table\n",
    "\n",
    "## Looking at the Black-White column, we see that Narcotics, Battery, and Unlawful Use of Weapon show the largest disparities\n",
    "## in judges being less likely to sentence White defendants to incarceration than Black defendants. \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.3.3: Examine whether this changes pre and post change to charging threshold for retail theft (13 points)\n",
    "\n",
    "One important question is not only whether there are disparities by offense type but also whether these disparities are changing over time.\n",
    "\n",
    "The SAO, for instance, announced in December of 2016 that they would no longer default to charging retail thefts of under \\$1,000 as felonies. This change might have (1) decreased disparities or (2) increased disparities, depending on the correlation between race/ethnicity and magnitude of goods stolen: [news coverage](https://www.dnainfo.com/chicago/20161215/little-village/kim-foxx-raises-bar-for-retail-theft-felonies/). \n",
    "\n",
    "Focusing on `simplified_offense_derived` == \"Retail theft.\" Using a function and/or loop (Dec. 2016 is always excluded as a transition month):\n",
    "\n",
    "- Compare Black-White disparities before and after the change using a two-month bandwidth (so pre is October and November 2016; post is January and February 2017)\n",
    "\n",
    "- Compare Black-White disparities before and after the change using a four-month bandwidth (so pre is August- November 2016; post is January - April 2017)\n",
    "\n",
    "- Compare Black-White disparities using an eight-month bandwidth\n",
    "\n",
    "- Compare Black-White disparities using a twelve-month bandwidth\n",
    "\n",
    "\n",
    "------------------ \n",
    "\n",
    "- Print a table with the results (any organization is fine as long as it's clear)  \n",
    "\n",
    "- Create a bar chart where the x axis represents different bandwidths (2, 4, etc); the y axis the size of the Black-White gap in whether the defendant receives incarceration, and for each of the x axis points, you have one shaded bar representing \"before\" the change, another representing \"after\" the change (make sure that before is ordered before after and the bandwidths are from smallest to largest)\n",
    "\n",
    "*Note*: for each of the bandwidths include dates the entire month (e.g., for the first, include not only 02-01-2017 but everything up through 02-28-2017; easiest way is for the subsetting to use the rounded `sentenceym_derived`). Also make sure to only include white or black defendants.\n",
    "\n",
    "\n",
    "**Extra credit**: because the bandwidths have different sample sizes, a better viz incorporates measures of uncertainty. Add standard errors to the estimates using the formula: $(\\dfrac{p(1-p)}{n})^{0.5}$ where $p$ is the gap and $N$ is the number of cases in each bandwidth period \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "datetime64[ns]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "50        Retail Theft\n",
       "66        Retail Theft\n",
       "171       Retail Theft\n",
       "176       Retail Theft\n",
       "415       Retail Theft\n",
       "              ...     \n",
       "248017    Retail Theft\n",
       "248040    Retail Theft\n",
       "248063    Retail Theft\n",
       "248066    Retail Theft\n",
       "248124    Retail Theft\n",
       "Name: simplified_offense_derived, Length: 9321, dtype: object"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## checking that setneceym_derived is of the datetime type \n",
    "print(df_filtered[\"sentenceym_derived\"].dtype)\n",
    "\n",
    "## filtering to the data frame we are looking at in this problem\n",
    "## retail, black and white\n",
    "\n",
    "df_retail = df_filtered[\n",
    "    (df_filtered['simplified_offense_derived'] == 'Retail Theft') &\n",
    "    (df_filtered['is_black_derived'] | df_filtered['is_white_derived'])].copy()\n",
    "\n",
    "df_retail[\"black_and_incarcerated\"] = df_retail[\"is_black_derived\"] & df_retail[\"is_incarcerated\"]\n",
    "df_retail[\"white_and_incarcerated\"] = df_retail[\"is_white_derived\"] & df_retail[\"is_incarcerated\"]\n",
    "\n",
    "\n",
    "\n",
    "## check\n",
    "df_retail[\"simplified_offense_derived\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2016-10-01 00:00:00 2016-12-01 00:00:00 2017-01-01 00:00:00 2017-04-01 00:00:00\n",
      "2016-08-01 00:00:00 2016-12-01 00:00:00 2017-01-01 00:00:00 2017-05-01 00:00:00\n",
      "2016-04-01 00:00:00 2016-12-01 00:00:00 2017-01-01 00:00:00 2017-09-01 00:00:00\n",
      "2015-12-01 00:00:00 2016-12-01 00:00:00 2017-01-01 00:00:00 2018-01-01 00:00:00\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 1200x800 with 0 Axes>"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<BarContainer object of 4 artists>"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<BarContainer object of 4 artists>"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, \"Black-White Incarceration Gap by Bandwidth Before and After SAO's Change\")"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'Bandwidth (months)')"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Incarceration Gap (Black - White)')"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "([<matplotlib.axis.XTick at 0x173c5e600>,\n",
       "  <matplotlib.axis.XTick at 0x173c5ee40>,\n",
       "  <matplotlib.axis.XTick at 0x173c5db50>,\n",
       "  <matplotlib.axis.XTick at 0x173d27500>],\n",
       " [Text(0, 0, '2'), Text(1, 0, '4'), Text(2, 0, '8'), Text(3, 0, '12')])"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x16a7af980>"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from datetime import datetime, timedelta\n",
    "\n",
    "## LOOPING...\n",
    "\n",
    "## setting up bandwidth and center using info from the problem\n",
    "bandwidth = [2, 4, 8, 12]\n",
    "center = datetime(2016, 12, 1)\n",
    "\n",
    "## for extra credit-->standard error using formula from the problem\n",
    "err = lambda p, n: ((p * (1 - p)) / n) ** 0.5\n",
    "\n",
    "## lists to hold the pre and post values for the bar plot\n",
    "prev_bars = []\n",
    "afte_bars = []\n",
    "\n",
    "## lists to hold the standard error values to plot\n",
    "prev_errs = []\n",
    "afte_errs = []\n",
    "\n",
    "## We used a for loop to go through every value in bandwidth (the different amount of pre and post months we want).\n",
    "\n",
    "for b in bandwidth:\n",
    "    \n",
    "    # Use center (which we set as dec 2016 per instructions) and use b (that bandwidth) to calculate \n",
    "    # 30 days times that many months (b) we want to go out (bc ~ 30 days in a month)\n",
    "    \n",
    "    lower_cutoff = center - timedelta(days=b * 30)\n",
    "    upper_cutoff = center + timedelta(days=31) + timedelta(days=(b + 1) * 30)\n",
    "\n",
    "    # to ensure that we are set to teh first day of the month we have gotten to via cutoff...\n",
    "    lower_cutoff, upper_cutoff = lower_cutoff.replace(day=1), upper_cutoff.replace(day=1)\n",
    "\n",
    "    # print to check loop running\n",
    "    print(lower_cutoff, center, datetime(2017, 1, 1), upper_cutoff)\n",
    "\n",
    "    # filter the retail data based on these time periods\n",
    "    retail_data_before = df_retail[(df_retail.sentenceym_derived >= lower_cutoff) &\n",
    "                                   (df_retail.sentenceym_derived <= center)]\n",
    "    retail_data_after = df_retail[(df_retail.sentenceym_derived >= datetime(2017, 1, 1)) &\n",
    "                                  (df_retail.sentenceym_derived <= upper_cutoff)]\n",
    "\n",
    "    # calculate incarceration disparities\n",
    "    disp_before = (retail_data_before.black_and_incarcerated.sum() / retail_data_before.is_black_derived.sum() -\n",
    "                   retail_data_before.white_and_incarcerated.sum() / retail_data_before.is_white_derived.sum())\n",
    "    disp_after = (retail_data_after.black_and_incarcerated.sum() / retail_data_after.is_black_derived.sum() -\n",
    "                  retail_data_after.white_and_incarcerated.sum() / retail_data_after.is_white_derived.sum())\n",
    "\n",
    "    # extra credit --> Calculate sample sizes for error calculation\n",
    "    n_before = retail_data_before.is_black_derived.sum() + retail_data_before.is_white_derived.sum()\n",
    "    n_after = retail_data_after.is_black_derived.sum() + retail_data_after.is_white_derived.sum()\n",
    "\n",
    "    # adding the results to their respective lists for plotting\n",
    "    prev_bars.append(disp_before)\n",
    "    afte_bars.append(disp_after)\n",
    "\n",
    "    prev_errs.append(err(disp_before, n_before))\n",
    "    afte_errs.append(err(disp_after, n_after))\n",
    "\n",
    "\n",
    "## PLOTTING...\n",
    "# Hardcode the x-values array corresponding to the bandwidth values\n",
    "x = [0, 1, 2, 3]  \n",
    "\n",
    "\n",
    "# Create figure and axes\n",
    "plt.figure(figsize=(12, 8))\n",
    "\n",
    "# Plot bars with error bars for 'Before' and 'After' periods\n",
    "plt.bar(np.array(x) - 0.3/2, prev_bars, 0.3, yerr=prev_errs, capsize=5, label='Before', color='skyblue')\n",
    "plt.bar(np.array(x) + 0.3/2, afte_bars, 0.3, yerr=afte_errs, capsize=5, label='After', color='salmon')\n",
    "\n",
    "# Labeling the graph\n",
    "plt.title(\"Black-White Incarceration Gap by Bandwidth Before and After SAO's Change\")\n",
    "plt.xlabel(\"Bandwidth (months)\")\n",
    "plt.ylabel(\"Incarceration Gap (Black - White)\")\n",
    "plt.xticks(x, bandwidth)  # Set x-ticks to correspond to the bandwidth values (2, 4, 8, 12)\n",
    "plt.legend(title=\"Period\")\n",
    "\n",
    "# Adjust layout for better fit and display the plot\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2.3.3.1: Interpret the results (2 points)\n",
    "\n",
    "Write a two-sentence interpretation of the results. What might this show about how people on both sides of the issue---those who argued that the retail theft policy change would narrow disparities; those who argued that the change may widen disparities--could support their claims? "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We see that looking at the 2 month bandwidth, the gap in incarceration rates between black and white defendants actually goes up after the SAO change, suggesting that black/white incarceration disparities increasedâ€“at least in the short runâ€“in response to the new rule. However, looking at the 4, 8, 12 month bandwidths, we see that the disparities between black and white incarceration rates decreased from before the rule change to after the rule change. This suggests, that over the longer term, the SAO rule change contributed to decreasing the disparities in black and white sentencing. Moreover, if we just examine the trend pre-SAO rule change, we see that the black-white incarceration disparity was decreasing steadily over time. This is illustrated by the fact that the blue bars decrease in size as we look from farther in the past (12 months before the rule change) to more recent times (only 2 months before the rule change). This suggests that black-white incarceration disparities were already narrowing and the SAO rule change likely also contributed to this decline by raising the standards for charging a retail theft crime as a felony. Therefore, those on either side of the issue could find grounds to support their claims, whether it be through looking at a particular bandwidth or the larger picture over all, highlighting that data can be used to support a preconceived opinion."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
